bhyp : value -> type. %name bhyp H.
%mode bhyp +V.

%block bl-trans-hb-exists : block {v : value} {x : exp} {dc : cor v x} {h : bhyp v}.



good-store : store -> type.

good-store/nil : good-store store/nil.

good-store/cons : good-store (store/cons Alph V)
                   <- bhyp V
                   <- good-store Alph.



match : exp -> type. %name match C.

match/num : match (num N).

match/var : match E
             <- bhyp V
             <- cor V E.

match/app : match (app E1 E2)
             <- match E1
             <- match E2.

match/lam : match (lam E1)
             <- {v} {x} cor v x -> bhyp v -> match (E1 x).

match/suc : match (suc E1)
             <- match E1.



match-exists : {E} match E -> type.
%mode match-exists +E -C.

match-exists/num : match-exists (num N) match/num.

match-exists/lam : match-exists (lam E1) (match/lam C1)
                    <- {x} {v} {dc : cor v x} {h : bhyp v} match-exists x (match/var dc h) -> match-exists (E1 x) (C1 v x dc h).

match-exists/app : match-exists (app E1 E2) (match/app C2 C1)
                    <- match-exists E1 C1
                    <- match-exists E2 C2.

match-exists/suc : match-exists (suc E1) (match/suc C1)
                    <- match-exists E1 C1.

%block bl-match-exists : block {x : exp} {v : value} {dc : cor v x} {h : bhyp v} {d : match-exists x (match/var dc h)}.

%worlds (bl-match-exists) (match-exists _ _).
%total E (match-exists E _).



<= : store -> store -> type. %infix none 5 <=.

<=/refl : Alph <= Alph.
<=/trans : Alph1 <= Alph3
            <- Alph1 <= Alph2
            <- Alph2 <= Alph3.

<=/cons : store/cons Alph1 V <= store/cons Alph2 V
           <- Alph1 <= Alph2.

<=/exchange : store/cons (store/cons Alph V1) V2 <= store/cons (store/cons Alph V2) V1.

<=/weaken : Alph <= store/cons Alph V.

<=/combine : store/cons (store/cons Alph V) V <= store/cons Alph V.



<=-nil : {Alph} store/nil <= Alph -> type.
%mode <=-nil +Alph -L.

<=-nil/nil : <=-nil store/nil <=/refl.

<=-nil/cons : <=-nil (store/cons Alph V) (<=/trans <=/weaken L)
               <- <=-nil Alph L.

%worlds (bl-trans-hb-exists) (<=-nil _ _).
%total Alph (<=-nil Alph _).




trans-hb-var-<= : trans-hb-var Alph I E -> Alph <= Alph' -> trans-hb-var Alph' I' E -> type.
%mode trans-hb-var-<= +DTV +L -DTV'.

trans-hb-var-<=/refl : trans-hb-var-<= DTV <=/refl DTV.

trans-hb-var-<=/trans : trans-hb-var-<= DTV (<=/trans L2 L1) DTV'
                         <- trans-hb-var-<= DTV L1 DTV''
                         <- trans-hb-var-<= DTV'' L2 DTV'.

trans-hb-var-<=/cons/here : trans-hb-var-<= (trans-hb-var/here DC) (<=/cons L) (trans-hb-var/here DC).

trans-hb-var-<=/cons/there : trans-hb-var-<= (trans-hb-var/there DTV) (<=/cons L) (trans-hb-var/there DTV')
                              <- trans-hb-var-<= DTV L DTV'.

trans-hb-var-<=/exchange/here : trans-hb-var-<= (trans-hb-var/here DC) <=/exchange (trans-hb-var/there (trans-hb-var/here DC)).

trans-hb-var-<=/exchange/there/here : trans-hb-var-<= (trans-hb-var/there (trans-hb-var/here DC)) <=/exchange (trans-hb-var/here DC).

trans-hb-var-<=/exchange/there/there : trans-hb-var-<= (trans-hb-var/there (trans-hb-var/there DTV)) <=/exchange (trans-hb-var/there (trans-hb-var/there DTV)).

trans-hb-var-<=/weaken : trans-hb-var-<= DTV <=/weaken (trans-hb-var/there DTV).

trans-hb-var-<=/combine/here : trans-hb-var-<= (trans-hb-var/here DC) <=/combine (trans-hb-var/here DC).

trans-hb-var-<=/combine/there/here : trans-hb-var-<= (trans-hb-var/there (trans-hb-var/here DC)) <=/combine (trans-hb-var/here DC).

trans-hb-var-<=/combine/there/there : trans-hb-var-<= (trans-hb-var/there (trans-hb-var/there DTV)) <=/combine (trans-hb-var/there DTV).

%worlds (bl-trans-hb) (trans-hb-var-<= _ _ _).
%total L (trans-hb-var-<= _ L _).



trans-hb-<= : trans-hb Alph B E -> Alph <= Alph' -> trans-hb Alph' B' E -> type.
%mode trans-hb-<= +DT +L -DT'.

trans-hb-<=/num : trans-hb-<= trans-hb/num L trans-hb/num.

trans-hb-<=/var : trans-hb-<= (trans-hb/var DTV) L (trans-hb/var DTV')
                   <- trans-hb-var-<= DTV L DTV'.

trans-hb-<=/lam : trans-hb-<= (trans-hb/lam DT) L (trans-hb/lam DT')
                   <- ({v} {x} {dc : cor v x}
                         trans-hb-<= (DT v x dc) (<=/cons L) (DT' v x dc)).

trans-hb-<=/app : trans-hb-<= (trans-hb/app DT2 DT1) L (trans-hb/app DT2' DT1')
                   <- trans-hb-<= DT1 L DT1'
                   <- trans-hb-<= DT2 L DT2'.

trans-hb-<=/suc : trans-hb-<= (trans-hb/suc DT) L (trans-hb/suc DT')
                   <- trans-hb-<= DT L DT'.

%worlds (bl-trans-hb) (trans-hb-<= _ _ _).
%total DT (trans-hb-<= DT _ _).



store-append : store -> store -> store -> type.
%mode store-append +Alph1 +Alph2 -Alph.

store-append/nil : store-append Alph1 store/nil Alph1.

store-append/cons : store-append Alph1 (store/cons Alph2 V) (store/cons Alph V)
                     <- store-append Alph1 Alph2 Alph.

%worlds () (store-append _ _ _).
%total Alph2 (store-append _ Alph2 _).



good-store-append : good-store Alph1 -> good-store Alph2 -> store-append Alph1 Alph2 Alph -> good-store Alph -> type.
%mode good-store-append +G1 +G2 -DSA -G.

good-store-append/nil : good-store-append G1 good-store/nil store-append/nil G1.

good-store-append/cons : good-store-append G1 (good-store/cons G2 H) (store-append/cons DSA) (good-store/cons G H)
                          <- good-store-append G1 G2 DSA G.

%worlds (bl-trans-hb-exists) (good-store-append _ _ _ _).
%total G2 (good-store-append _ G2 _ _).



<=-append1 : store-append Alph1 Alph2 Alph -> Alph1 <= Alph -> type.
%mode <=-append1 +DSA -L.

<=-append1/nil : <=-append1 store-append/nil <=/refl.

<=-append1/cons : <=-append1 (store-append/cons DSA) (<=/trans <=/weaken L)
                   <- <=-append1 DSA L.

%worlds (bl-trans-hb-exists) (<=-append1 _ _).
%total DSA (<=-append1 DSA _).



<=-append2 : store-append Alph1 Alph2 Alph -> Alph2 <= Alph -> type.
%mode <=-append2 +DSA -L.

<=-append2/nil : <=-append2 store-append/nil L
                  <- <=-nil _ L.

<=-append2/cons : <=-append2 (store-append/cons DSA) (<=/cons L)
                   <- <=-append2 DSA L.

%worlds (bl-trans-hb-exists) (<=-append2 _ _).
%total DSA (<=-append2 DSA _).



move-to-head : ({v} bhyp v -> good-store (Alph v)) -> good-store Alph' -> ({v} Alph v <= store/cons Alph' v) -> type.
%mode move-to-head +G -G' -L.

move-to-head/nil : move-to-head ([v] [h] good-store/nil)
                    good-store/nil ([v] <=/weaken).

move-to-head/cons/same1 : move-to-head ([v] [h] good-store/cons (G v h) (H v))
                           G' ([v] <=/trans <=/combine (<=/cons (L v)))
                           <- move-to-head G G' L.

move-to-head/cons/same2 : move-to-head ([v] [h] good-store/cons (G v h) h)
                           G' ([v] <=/trans <=/combine (<=/cons (L v)))
                           <- move-to-head G G' L.

move-to-head/cons/diff : move-to-head ([v] [h] good-store/cons (G v h) H)
                          (good-store/cons G' H) ([v] <=/trans <=/exchange (<=/cons (L v)))
                          <- move-to-head G G' L.

%worlds (bl-trans-hb-exists) (move-to-head _ _ _).
%total G (move-to-head G _ _).



trans-hb-exists' : match E -> good-store Alph -> trans-hb Alph B E -> type.
%mode trans-hb-exists' +C -G -DT.

trans-hb-exists'/num : trans-hb-exists' match/num good-store/nil trans-hb/num.

trans-hb-exists'/var : trans-hb-exists' (match/var DC H) (good-store/cons good-store/nil H) (trans-hb/var (trans-hb-var/here DC)).

trans-hb-exists'/app : trans-hb-exists' (match/app C2 C1) G1+G2 (trans-hb/app DT2' DT1')
                        <- trans-hb-exists' C1 G1 DT1
                        <- trans-hb-exists' C2 G2 DT2
                        <- good-store-append G1 G2 DSA G1+G2
                        <- <=-append1 DSA L1
                        <- trans-hb-<= DT1 L1 DT1'
                        <- <=-append2 DSA L2
                        <- trans-hb-<= DT2 L2 DT2'.

trans-hb-exists'/lam : trans-hb-exists' (match/lam C1) G1' (trans-hb/lam DT1')
                        <- ({v} {x} {dc : cor v x} {h : bhyp v}
                              trans-hb-exists' (C1 v x dc h) (G1 v h) (DT1 v x dc : trans-hb _ B _))
                        <- move-to-head G1 G1' L
                        <- ({v} {x} {dc : cor v x}
                              trans-hb-<= (DT1 v x dc) (L v) (DT1' v x dc)).

trans-hb-exists'/suc : trans-hb-exists' (match/suc C1) G1 (trans-hb/suc DT1)
                        <- trans-hb-exists' C1 G1 DT1.

%worlds (bl-trans-hb-exists) (trans-hb-exists' _ _ _).
%total C (trans-hb-exists' C _ _).



coerce-trans-hb : good-store Alph -> trans-hb Alph B E -> trans-hb store/nil B E -> type.
%mode coerce-trans-hb +G +DT -DT'.

coerce-trans-hb/ : coerce-trans-hb good-store/nil DT DT.

%worlds () (coerce-trans-hb _ _ _).
%total {} (coerce-trans-hb _ _ _).



trans-hb-exists : {E} trans-hb store/nil B E -> type.
%mode trans-hb-exists +E -DT.

trans-hb-exists/ : trans-hb-exists E DT
                    <- match-exists E C
                    <- trans-hb-exists' C G DT'
                    <- coerce-trans-hb G DT' DT.

%worlds () (trans-hb-exists _ _).
%total {} (trans-hb-exists _ _).
