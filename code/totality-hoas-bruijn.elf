bound : exp -> type.

%block bl-bound
   : block {x : exp} {xb : bound x}.



cover : env -> exp -> type.

cover/num : cover Alph (num N).

cover/free : cover Alph E
              <- trans-hb-var Alph I E.

cover/bound : cover Alph E
               <- bound E.

cover/lam : cover Alph (lam E1)
             <- {x} bound x -> cover Alph (E1 x).

cover/app : cover Alph (app E1 E2)
             <- cover Alph E1
             <- cover Alph E2.

cover/suc : cover Alph (suc E1)
             <- cover Alph E1.



empty-cover : {E} cover env/nil E -> type.
%mode empty-cover +E -C.

empty-cover/num : empty-cover (num N) cover/num.

empty-cover/lam : empty-cover (lam E1) (cover/lam C1)
                   <- {x} {xb} empty-cover x (cover/bound xb) -> empty-cover (E1 x) (C1 x xb).

empty-cover/app : empty-cover (app E1 E2) (cover/app C2 C1)
                   <- empty-cover E1 C1
                   <- empty-cover E2 C2.

empty-cover/suc : empty-cover (suc E1) (cover/suc C1)
                   <- empty-cover E1 C1.

%block bl-empty-cover
   : block {x : exp} {xb : bound x} {pf : empty-cover x (cover/bound xb)}.

%worlds (bl-empty-cover) (empty-cover _ _).
%total E (empty-cover E _).



bound-to-free : ({x} bound x -> cover Alph (E x))
                 -> ({v} {x} cor v x -> cover (env/cons Alph v) (E x))
                 -> type.
%mode bound-to-free +C -C'.

bound-to-free/num : bound-to-free
                     ([x] [xb] cover/num : cover _ (num N))
                     ([v] [x] [dc] cover/num).

bound-to-free/bound/this : bound-to-free
                            ([x] [xb] cover/bound xb)
                            ([v] [x] [dc] cover/free (trans-hb-var/here dc)).

bound-to-free/bound/other : bound-to-free
                             ([x] [xb] cover/bound YB)
                             ([v] [x] [dc] cover/bound YB).

bound-to-free/free : bound-to-free
                      ([x] [xb] cover/free (DTV x : trans-hb-var _ I _))
                      ([v] [x] [dc] cover/free (trans-hb-var/there (DTV x))).

bound-to-free/lam : bound-to-free
                     ([x] [xb] cover/lam ([y] [yb] C1 x xb y yb))
                     ([v] [x] [dc] cover/lam ([y] [yb] C2 v x dc y yb))
                     <- {y} {yb} bound-to-free ([x] [xb] C1 x xb y yb) ([v] [x] [dc] C2 v x dc y yb).

bound-to-free/app : bound-to-free
                     ([x] [xb] cover/app (C2 x xb) (C1 x xb))
                     ([v] [x] [dc] cover/app (C2' v x dc) (C1' v x dc))
                     <- bound-to-free C1 C1'
                     <- bound-to-free C2 C2'.

bound-to-free/suc : bound-to-free
                     ([x] [xb] cover/suc (C1 x xb))
                     ([v] [x] [dc] cover/suc (C1' v x dc))
                     <- bound-to-free C1 C1'.

%worlds (bl-trans-hb | bl-bound) (bound-to-free _ _).
%total C (bound-to-free C _).



trans-hb-exists' : {E} cover Alph E -> trans-hb Alph B E -> type.
%mode trans-hb-exists' +E +C -DT.

trans-hb-exists'/num : trans-hb-exists' _ cover/num trans-hb/num.

trans-hb-exists'/free : trans-hb-exists' _ (cover/free DTV) (trans-hb/var DTV).

trans-hb-exists'/lam : trans-hb-exists' _ (cover/lam [x] [xb] C1 x xb) (trans-hb/lam DT1)
                        <- bound-to-free C1 C1'
                        <- {v} {x} {dc : cor v x} trans-hb-exists' _ (C1' v x dc) (DT1 v x dc).

trans-hb-exists'/app : trans-hb-exists' _ (cover/app C2 C1) (trans-hb/app DT2 DT1)
                        <- trans-hb-exists' _ C1 DT1
                        <- trans-hb-exists' _ C2 DT2.

trans-hb-exists'/suc : trans-hb-exists' _ (cover/suc C1) (trans-hb/suc DT1)
                        <- trans-hb-exists' _ C1 DT1.

%worlds (bl-trans-hb) (trans-hb-exists' _ _ _).
%total E (trans-hb-exists' E _ _).



trans-hb-exists : {E} trans-hb env/nil B E -> type.
%mode trans-hb-exists +E -DT.

trans-hb-exists/ : trans-hb-exists E DT
                    <- empty-cover E C
                    <- trans-hb-exists' E C DT.

%worlds () (trans-hb-exists _ _).
%total {} (trans-hb-exists _ _).
