% Syntax with reified variables.
void : type.
%worlds () (void).

rexp : type. %name rexp R.
var : type. %name var X x.

freeze-fix-var : var -> var -> type.
- : freeze-fix-var X Y <- {z : var} var.

var/void : void -> var.

rnum : nat -> rexp.
rvar : var -> rexp.
rlam : (var -> rexp) -> rexp.
rapp : rexp -> rexp -> rexp.

%block bl-var : block {x : var}.
%worlds (bl-var) (var) (rexp).



% Canonical forms.
rcanon : rexp -> type. %name rcanon DC.
%mode rcanon +R.

rcanon/num : rcanon (rnum N).

rcanon/var : rcanon (rvar X).

rcanon/lam : rcanon (rlam E).



id : rexp -> rexp -> type.

id/refl : id R R.



id-rlam : ({x} id (R x) (R' x)) -> id (rlam R) (rlam R') -> type.
%mode id-rlam +ID -ID'.

- : id-rlam ([x] id/refl) id/refl.

%worlds (bl-var) (id-rlam _ _).
%total {} (id-rlam _ _).



id-rapp : id R1 R1' -> id R2 R2' -> id (rapp R1 R2) (rapp R1' R2') -> type.
%mode id-rapp +ID1 +ID2 -ID.

- : id-rapp id/refl id/refl id/refl.

%worlds (bl-var) (id-rapp _ _ _).
%total {} (id-rapp _ _ _).
