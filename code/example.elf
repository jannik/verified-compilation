test1 : exp = app (app (lam [f] lam [x] app f x) (lam [x] x)) (num (s z)).

%define btest1 = B
%solve _ : trans-hb-pseudo-exists test1 (DT : trans-hb store/nil B test1).

%define stest1 = S
%solve _ : trans-bs btest1 S.

%query 1 4 D : seval stest1 W.

btest2 : bexp = bnum z.

%define stest2 = S
%solve _ : trans-bs btest2 S. 

%query 1 4 D : seval stest2 W.

test3 : exp = app (app (lam [x] lam [y] x) (num z)) (num (s z)).

%define btest3 = B
%solve _ : trans-hb-pseudo-exists test3 (DT : trans-hb store/nil B test3).

%define ptest3 = P
%solve _ : trans-bs btest3 P.

%query 1 5 D : eval test3 C.
%query 1 5 D : beval store/nil btest3 V.
%query 1 5 D : seval ptest3 W.

%define qtest3 = Q
%define qtest3-start = K
%solve _ : trans-sm ptest3 Q K.

%query 1 1 meval qtest3 qtest3-start R.



test4 : exp = app (lam [x] x) (num 5).

%define btest4 = B
%solve _ : trans-hb-pseudo-exists test4 (DT : trans-hb store/nil B test4).

%define ptest4 = P
%solve _ : trans-bs btest4 P.

%query 1 5 D : eval test4 C.
%query 1 5 D : beval store/nil btest4 V.
%query 1 5 D : seval ptest4 W.

%define qtest4 = Q
%define qtest4-start = K
%solve _ : trans-sm ptest4 Q K.

%query 1 1 meval qtest4 qtest4-start R.



test5 : exp = app (app (app (lam [f] lam [x] app f x) (lam [x] lam [y] x)) (num 4)) (num 5).

%define btest5 = B
%solve _ : trans-hb-pseudo-exists test5 (DT : trans-hb store/nil B test5).

%define ptest5 = P
%solve _ : trans-bs btest5 P.

%query 1 5 D : eval test5 C.
%query 1 5 D : beval store/nil btest5 V.
%query 1 5 D : seval ptest5 W.

%define qtest5 = Q
%define qtest5-start = K
%solve _ : trans-sm ptest5 Q K.

%query 1 1 meval qtest5 qtest5-start R.
