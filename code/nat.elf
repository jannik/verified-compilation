nat : type. %name nat N.

z : nat.
s : nat -> nat.

0 : nat = z.
1 : nat = s 0.
2 : nat = s 1.
3 : nat = s 2.
4 : nat = s 3.
5 : nat = s 4.



add : nat -> nat -> nat -> type.
%mode add +N1 +N2 -N.

add/z : add z N N.

add/s : add (s N1) N2 (s N)
         <- add N1 N2 N.

%worlds () (add _ _ _).
%total N (add N _ _).



add-exists : {N1} {N2} add N1 N2 N -> type.
%mode add-exists +N1 +N2 -DA.

add-exists/z : add-exists z N2 add/z.

add-exists/s : add-exists (s N1) N2 (add/s DA)
                <- add-exists N1 N2 DA.

%worlds () (add-exists _ _ _).
%total N1 (add-exists N1 _ _).



add-right-z : {N : nat} add N z N -> type.
%mode add-right-z +N -DA.

add-right-z/z : add-right-z z add/z.

add-right-z/s : add-right-z (s N) (add/s DA)
                 <- add-right-z N DA.

%worlds () (add-right-z _ _).
%total N (add-right-z N _).



add-right-s : add N1 N2 N -> add N1 (s N2) (s N) -> type.
%mode add-right-s +DA -DA'.

add-right-s/z : add-right-s add/z add/z.

add-right-s/s : add-right-s (add/s DA) (add/s DA')
                 <- add-right-s DA DA'.

%worlds () (add-right-s _ _).
%total DA (add-right-s DA _).



add-comm : add N1 N2 N -> add N2 N1 N -> type.
%mode add-comm +DA -DA'.

add-comm/z : add-comm add/z DA
              <- add-right-z _ DA.

add-comm/s : add-comm (add/s DA) DA''
              <- add-comm DA DA'
              <- add-right-s DA' DA''.

%worlds () (add-comm _ _).
%total DA (add-comm DA _).



add-move-s : add N1 (s N2) N -> add (s N1) N2 N -> type.
%mode add-move-s +DA -DA'.

add-move-s/z : add-move-s add/z (add/s add/z).

add-move-s/s : add-move-s (add/s DA) (add/s DA')
                <- add-move-s DA DA'.

%worlds () (add-move-s _ _).
%total DA (add-move-s DA _).
