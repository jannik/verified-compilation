mvalue : type. %name mvalue W.
menv : type. %name menv Gam.

rnum : number -> mvalue.
rclos : menv -> label -> mvalue.

menv/nil : menv.
menv/cons : menv -> mvalue -> menv.



rstack : type. %name rstack Phi.

rstack/nil : rstack.
rstack/cons : rstack -> mvalue -> rstack.

rstack/single = rstack/cons rstack/nil.



mframes : type. %name mframes Delta.

mframes/nil : mframes.
mframes/cons : mframes -> menv -> label -> mframes.

mframes/final = mframes/cons mframes/nil menv/nil.



mvar-lookup : menv -> nat -> mvalue -> type. %name mvar-lookup DVL.
%mode mvar-lookup +Gam +I -W.

mvar-lookup/here : mvar-lookup (menv/cons Gam W) z W.

mvar-lookup/there : mvar-lookup (menv/cons Gam W') (s I) W
                     <- mvar-lookup Gam I W.



label-lookup : mprog -> label -> minst -> type. %name label-lookup DLL.
%mode label-lookup +Q +L -M.

label-lookup/here : label-lookup (M ; Q) z M.

label-lookup/there : label-lookup (M' ; Q) (s L) M
                      <- label-lookup Q L M.

%worlds () (label-lookup _ _ _).
%unique label-lookup +Q +L -1M.



mstep : minst -> mframes -> label -> rstack -> mframes -> label -> rstack -> type. %name mstep DM.
%mode mstep +M +Delta +L +Phi -Delta' -L' -Phi'.

mstep/pushnum : mstep (mpushnum N) (mframes/cons Delta Gam L-Ret) L Phi
                                   (mframes/cons Delta Gam L-Ret) (s L) (rstack/cons Phi (rnum N)).

mstep/pushvar : mstep (mpushvar I) (mframes/cons Delta Gam L-Ret) L Phi
                                   (mframes/cons Delta Gam L-Ret) (s L) (rstack/cons Phi W)
                 <- mvar-lookup Gam I W.

mstep/pushclos : mstep (mpushclos L') (mframes/cons Delta Gam L-Ret) L Phi
                                      (mframes/cons Delta Gam L-Ret) (s L) (rstack/cons Phi (rclos Gam L')).

mstep/call : mstep mcall (mframes/cons Delta Gam L-Ret) L (rstack/cons (rstack/cons Phi (rclos Gam' L')) W)
                         (mframes/cons (mframes/cons Delta Gam L-Ret) (menv/cons Gam' W) (s L)) L' Phi.

mstep/inc : mstep minc Delta L (rstack/cons Phi (rnum N))
                       Delta (s L) (rstack/cons Phi (rnum (s N))).

mstep/ret : mstep mret (mframes/cons Delta Gam' L-Ret) L Phi
                       Delta L-Ret Phi.



msteps : mprog -> mframes -> label -> rstack -> mvalue -> type. %name msteps DMM.
%mode msteps +Q +Delta +L +Phi -W.

msteps/zero : msteps Q mframes/nil L (rstack/single W) W
               <- label-lookup Q L mhalt.

msteps/more : msteps Q Delta L Phi W
               <- label-lookup Q L M
               <- mstep M Delta L Phi Delta' L' Phi'
               <- msteps Q Delta' L' Phi' W.



%abbrev meval : mprog -> label -> mvalue -> type = [q] [l] [r] msteps q (mframes/final z) l rstack/nil r.
