mvalue : type. %name mvalue R.
mstore : type. %name mstore Gam.

rnum : number -> mvalue.
rclos : mstore -> label -> mvalue.

mstore/nil : mstore.
mstore/cons : mstore -> mvalue -> mstore.



rstack : type. %name rstack Phi.

rstack/nil : rstack.
rstack/cons : rstack -> mvalue -> rstack.



rstack/single = rstack/cons rstack/nil.



mframes : type. %name mframes Delta.

mframes/nil : mframes.
mframes/cons : mframes -> mstore -> label -> mframes.

mframes/final = mframes/cons mframes/nil mstore/nil.



mvar-lookup : mstore -> nat -> mvalue -> type. %name mvar-lookup DVL.
%mode mvar-lookup +Gam +I -R.

mvar-lookup/here : mvar-lookup (mstore/cons Gam R) z R.

mvar-lookup/there : mvar-lookup (mstore/cons Gam R') (s I) R
                     <- mvar-lookup Gam I R.



label-lookup : mprog -> label -> minst -> type. %name label-lookup DLL.
%mode label-lookup +Q +L -M.

label-lookup/here : label-lookup (M ; Q) z M.

label-lookup/there : label-lookup (M' ; Q) (s L) M
                      <- label-lookup Q L M.

%worlds () (label-lookup _ _ _).
%unique label-lookup +Q +L -1M.



mstep : minst -> mframes -> label -> rstack -> mframes -> label -> rstack -> type. %name mstep DM.
%mode mstep +M +Delta +L +Phi -Delta' -L' -Phi'.

mstep/pushnum : mstep (mpushnum N) (mframes/cons Delta Gam L-Ret) L Phi
                                   (mframes/cons Delta Gam L-Ret) (s L) (rstack/cons Phi (rnum N)).

mstep/pushvar : mstep (mpushvar I) (mframes/cons Delta Gam L-Ret) L Phi
                                   (mframes/cons Delta Gam L-Ret) (s L) (rstack/cons Phi R)
                 <- mvar-lookup Gam I R.

mstep/pushclos : mstep (mpushclos L') (mframes/cons Delta Gam L-Ret) L Phi
                                      (mframes/cons Delta Gam L-Ret) (s L) (rstack/cons Phi (rclos Gam L')).

mstep/call : mstep mcall (mframes/cons Delta Gam L-Ret) L (rstack/cons (rstack/cons Phi (rclos Gam' L')) R)
                         (mframes/cons (mframes/cons Delta Gam L-Ret) (mstore/cons Gam' R) (s L)) L' Phi.

mstep/inc : mstep minc Delta L (rstack/cons Phi (rnum N))
                       Delta (s L) (rstack/cons Phi (rnum (s N))).

mstep/ret : mstep mret (mframes/cons Delta Gam' L-Ret) L Phi
                       Delta L-Ret Phi.



msteps : mprog -> mframes -> label -> rstack -> mframes -> label -> rstack -> type. %name msteps DMM.
%mode msteps +Q +Delta +L +Phi -Delta' -L' -Phi'.

msteps/zero : msteps Q Delta L Phi Delta L Phi.

msteps/more : msteps Q Delta L Phi Delta'' L'' Phi''
               <- label-lookup Q L M
               <- mstep M Delta L Phi Delta' L' Phi'
               <- msteps Q Delta' L' Phi' Delta'' L'' Phi''.



meval : mprog -> label -> mvalue -> type. %name meval DQ.
%mode meval +Q +L -R.

meval/ : meval Q L R
          <- msteps Q (mframes/final z) L rstack/nil
                      mframes/nil L' (rstack/single R)
          <- label-lookup Q L' mhalt.
