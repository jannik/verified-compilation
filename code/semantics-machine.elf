mregs : type. %name mregs Phi.

mregs/nil : mregs.
mregs/cons : mregs -> mvalue -> mregs.

%abbrev mregs/cons4 = [phi] [r1] [r2] [r3] [r4] mregs/cons (mregs/cons (mregs/cons (mregs/cons phi r1) r2) r3 ) r4.



mframe : type. %name mframe F.

% A frame consists of registers, environment, argument, return address.
fr : mregs -> mvalue -> mvalue -> mvalue -> mframe.



mstack : type. %name mstack Gamma.

mstack/nil : mstack.
mstack/cons : mstack -> mframe -> mstack.



mblock : type. %name mblock B.

mblock/nil : mblock.
mblock/cons : mvalue -> mblock -> mblock.



mheap : type. %name mheap H.

mheap/nil : mheap.
mheap/cons : mblock -> mheap -> mheap.



reg-peek : mregs -> nat -> mvalue -> type.
%mode reg-peek +Phi +N -R.

reg-peek/here : reg-peek (mregs/cons Phi R) z R.

reg-peek/there : reg-peek (mregs/cons Phi R') (s N) R
                  <- reg-peek Phi N R.



prog-fetch : mprog -> paddr -> minst -> type.
%mode prog-fetch +Q +K -M.

prog-fetch/here : prog-fetch (M ; Q) z M.

prog-fetch/there : prog-fetch (M' ; Q) (s K) M
                    <- prog-fetch Q K M.



block-fetch : mblock -> nat -> mvalue -> type.
%mode block-fetch +B +O -R.

block-fetch/here : block-fetch (mblock/cons R B) z R.

block-fetch/there : block-fetch (mblock/cons R' B) (s O) R
                     <- block-fetch B O R.



block-alloc : nat -> mblock -> type.
%mode block-alloc +N -B.

block-alloc/z : block-alloc z mblock/nil.

block-alloc/s : block-alloc (s N) (mblock/cons rundef B)
                 <- block-alloc N B.



block-update : mblock -> nat -> mvalue -> mblock -> type.
%mode block-update +B +O +R -B'.

block-update/here : block-update (mblock/cons R' B) z R (mblock/cons R B).

block-update/there : block-update (mblock/cons R' B) (s O) R (mblock/cons R' B')
                      <- block-update B O R B'.



heap-fetch-block : mheap -> haddr -> mblock -> type.
%mode heap-fetch-block +H +A -B.

heap-fetch-block/here : heap-fetch-block (mheap/cons B H) z B.

heap-fetch-block/there : heap-fetch-block (mheap/cons B H) (s A) B
                    <- heap-fetch-block H A B.



heap-fetch : mheap -> haddr -> nat -> mvalue -> type.
%mode heap-fetch +H +A +O -R.

heap-fetch/ : heap-fetch H A O R
               <- heap-fetch-block H A B
               <- block-fetch B O R.



heap-update : mheap -> haddr -> nat -> mvalue -> mheap -> type.
%mode heap-update +H +A +O +R -H'.

heap-update/here : heap-update (mheap/cons B H) z O R (mheap/cons B' H)
                    <- block-update B O R B'.

heap-update/there : heap-update (mheap/cons B H) (s A) O R (mheap/cons B H')
                     <- heap-update H A O R H'.



heap-alloc : mheap -> nat -> mheap -> haddr -> type.
%mode heap-alloc +H +N -H' -A.

heap-alloc/nil : heap-alloc mheap/nil N (mheap/cons B mheap/nil) z
                  <- block-alloc N B.

heap-alloc/cons : heap-alloc (mheap/cons B H) N (mheap/cons B H') (s A)
                   <- heap-alloc H N H' A.



mexec : minst -> mheap -> mstack -> mframe -> paddr -> mheap -> mstack -> mframe -> paddr -> type.
%mode mexec +M +H +Gamma +F +K -H' -Gamma' -F' -K'.

mexec/load : mexec (mload O) H Gamma (fr (mregs/cons Phi (rhaddr A)) Env Arg Ret) K
                             H Gamma (fr (mregs/cons Phi R) Env Arg Ret) (s K)
              <- heap-fetch H A O R.

mexec/store : mexec (mstore O) H Gamma (fr (mregs/cons (mregs/cons Phi (rhaddr A)) R) Env Arg Ret) K
                               H' Gamma (fr (mregs/cons Phi (rhaddr A)) Env Arg Ret) (s K)
                <- heap-update H A O R H'.

mexec/alloc : mexec (malloc N) H Gamma (fr Phi Env Arg Ret) K
                               H' Gamma (fr (mregs/cons Phi (rhaddr A)) Env Arg Ret) (s K)
               <- heap-alloc H N H' A.

mexec/peek : mexec (mpeek N) H Gamma (fr Phi Env Arg Ret) K
                             H Gamma (fr (mregs/cons Phi R) Env Arg Ret) (s K)
              <- reg-peek Phi N R.

mexec/pushnum : mexec (mpushnum N) H Gamma (fr Phi Env Arg Ret) K
                                   H Gamma (fr (mregs/cons Phi (rnum N)) Env Arg Ret) (s K).

mexec/pushpaddr : mexec (mpushpaddr K') H Gamma (fr Phi Env Arg Ret) K
                                       H Gamma (fr (mregs/cons Phi (rpaddr K')) Env Arg Ret) (s K).

mexec/inc : mexec minc H Gamma (fr (mregs/cons Phi (rnum N)) Env Arg Ret) K
                       H Gamma (fr (mregs/cons Phi (rnum (s N))) Env Arg Ret) (s K).

mexec/getarg : mexec mgetarg H Gamma (fr Phi Env Arg Ret) K
                             H Gamma (fr (mregs/cons Phi Arg) Env Arg Ret) (s K).

mexec/getenv : mexec mgetenv H Gamma (fr Phi Env Arg Ret) K
                             H Gamma (fr (mregs/cons Phi Env) Env Arg Ret) (s K).

mexec/getret : mexec mgetret H Gamma (fr Phi Env Arg Ret) K
                             H Gamma (fr (mregs/cons Phi Ret) Env Arg Ret) (s K).

mexec/newframe : mexec mnewframe H Gamma (fr (mregs/cons4 Phi Env' Arg' Ret' R) Env Arg Ret) K
                                 H (mstack/cons Gamma (fr Phi Env Arg Ret))
                                   (fr (mregs/cons mregs/nil R) Env' Arg' Ret') (s K).

mexec/endframe : mexec mendframe H (mstack/cons Gamma (fr Phi Env Arg Ret))
                                   (fr (mregs/cons mregs/nil Result) Env' Arg' Ret') K
                                 H Gamma (fr (mregs/cons Phi Result) Env Arg Ret) (s K).

mexec/jump : mexec mjump H Gamma (fr (mregs/cons Phi (rpaddr K')) Env Arg Ret) K H Gamma (fr Phi Env Arg Ret) K'.

mexec/getaddr : mexec (mgetaddr O) H Gamma (fr Phi Env Arg Ret) K H Gamma (fr (mregs/cons Phi (rpaddr K')) Env Arg Ret) (s K)
                 <- add K O K'.



mstep : mprog -> mheap -> mstack -> mframe -> paddr -> mheap -> mstack -> mframe -> paddr -> type.
%mode mstep +Q +H +Gamma +F +K -H' -Gamma' -F' -K'.

mstep/ : mstep Q H Gamma F K H' Gamma' F' K'
          <- prog-fetch Q K M
          <- mexec M H Gamma F K H' Gamma' F' K'.



msteps : mprog -> mheap -> mstack -> mframe -> paddr -> mheap -> mstack -> mframe -> paddr -> type.
%mode msteps +Q +H +Gamma +F +K -H' -Gamma' -F' -K'.

msteps/zero : msteps Q H Gamma F K H Gamma F K.

msteps/more : msteps Q H Gamma F K H' Gamma' F' K'
               <- mstep Q H Gamma F K H'' Gamma'' F'' K''
               <- msteps Q H'' Gamma'' F'' K'' H' Gamma' F' K'.



msteps/single = msteps/more msteps/zero.



% Complete evaluation.
meval : mprog -> paddr -> mvalue -> type.
%mode meval +Q +K -R.

meval/ : meval Q K R
          <- msteps Q mheap/nil mstack/nil (fr mregs/nil rundef rundef rundef) K
                      H' mstack/nil (fr (mregs/cons mregs/nil R) rundef rundef rundef) K'
          <- prog-fetch Q K' mhalt.



% Partial evaluation.
mstepsn : nat -> mprog -> mheap -> mstack -> mframe -> paddr -> mheap -> mstack -> mframe -> paddr -> type.
%mode mstepsn +N +Q +H +Gamma +F +K -H' -Gamma' -F' -K'.

mstepsn/zero : mstepsn z Q H Gamma F K H Gamma F K.

mstepsn/more : mstepsn (s N) Q H Gamma F K H' Gamma' F' K'
               <- mstep Q H Gamma F K H'' Gamma'' F'' K''
               <- mstepsn N Q H'' Gamma'' F'' K'' H' Gamma' F' K'.



mevaln : nat -> mprog -> paddr -> mheap -> mstack -> mframe -> paddr -> minst -> type.
%mode mevaln +N +Q +K -H' -Gamma' -F' -K' -M'.

mevaln/ : mevaln N Q K H' Gamma' F' K' M'
          <- mstepsn N Q mheap/nil mstack/nil (fr mregs/nil rundef rundef rundef) K
                      H' Gamma' F' K'
          <- prog-fetch Q K' M'.
