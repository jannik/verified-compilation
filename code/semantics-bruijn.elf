store : type. %name store Alph.
value : type. %name value V.

store/nil : store.

store/cons : store -> value -> store.

vnum : nat -> value.

vclos : store -> bexp -> value.



beval-var : store -> nat -> value -> type.

beval-var/here : beval-var (store/cons Alph V) z V.

beval-var/there : beval-var (store/cons Alph V') (s I) V
                   <- beval-var Alph I V.



beval : store -> bexp -> value -> type. %name beval DB.

beval/num : beval Alph (bnum N) (vnum N).

beval/var : beval Alph (bvar I) V
             <- beval-var Alph I V.

beval/lam : beval Alph (blam B1) (vclos Alph B1).

beval/app : beval Alph (bapp B1 B2) V
             <- beval Alph B1 (vclos Alph' B0)
             <- beval Alph B2 V2
             <- beval (store/cons Alph' V2) B0 V.

beval/suc : beval Alph (bsuc B1) (vnum (s N))
             <- beval Alph B1 (vnum N).
