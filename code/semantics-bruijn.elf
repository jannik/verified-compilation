store : type. %name store Sigma.
value : type. %name value V.

store/nil : store.

store/cons : store -> value -> store.

vnum : nat -> value.

vclos : store -> bexp -> value.



beval-var : store -> nat -> value -> type.

beval-var/here : beval-var (store/cons Sigma V) z V.

beval-var/there : beval-var (store/cons Sigma V') (s I) V
                   <- beval-var Sigma I V.



beval : store -> bexp -> value -> type. %name beval DB.

beval/num : beval Sigma (bnum N) (vnum N).

beval/var : beval Sigma (bvar I) V
             <- beval-var Sigma I V.

beval/lam : beval Sigma (blam B1) (vclos Sigma B1).

beval/app : beval Sigma (bapp B1 B2) V
             <- beval Sigma B1 (vclos Sigma' B0)
             <- beval Sigma B2 V2
             <- beval (store/cons Sigma' V2) B0 V.

beval/suc : beval Sigma (bsuc B1) (vnum (s N))
             <- beval Sigma B1 (vnum N).

beval/case/z : beval Sigma (bcase B1 B2 B3) V2
               <- beval Sigma B1 (vnum z)
               <- beval Sigma B2 V2.

beval/case/s : beval Sigma (bcase B1 B2 B3) V3
               <- beval Sigma B1 (vnum (s N))
               <- beval (store/cons Sigma (vnum N)) B3 V3.
