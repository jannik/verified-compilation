env : type. %name env Alph.
value : type. %name value U.

env/nil : env.

env/cons : env -> value -> env.

vnum : nat -> value.

vclos : env -> bexp -> value.



beval-var : env -> nat -> value -> type.
%mode beval-var +Alph +I -U.

beval-var/here : beval-var (env/cons Alph U) z U.

beval-var/there : beval-var (env/cons Alph U') (s I) U
                   <- beval-var Alph I U.



beval : env -> bexp -> value -> type. %name beval DB.
%mode beval +Alph +B -U.

beval/num : beval Alph (bnum N) (vnum N).

beval/var : beval Alph (bvar I) U
             <- beval-var Alph I U.

beval/lam : beval Alph (blam B1) (vclos Alph B1).

beval/app : beval Alph (bapp B1 B2) U
             <- beval Alph B1 (vclos Alph' B0)
             <- beval Alph B2 U2
             <- beval (env/cons Alph' U2) B0 U.

beval/suc : beval Alph (bsuc B1) (vnum (s N))
             <- beval Alph B1 (vnum N).
