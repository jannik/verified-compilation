
mvalue : type. %name mvalue R.
mstore : type. %name mstore Alpha.

rnum : number -> mvalue.
rclos : mstore -> label -> mvalue.

mstore/nil : mstore.
mstore/cons : mstore -> mvalue -> mstore.



rstack : type. %name rstack Phi.

rstack/nil : rstack.
rstack/cons : rstack -> mvalue -> rstack.



rstack/single = rstack/cons rstack/nil.



mframes : type. %name mframes Gamma.

mframes/nil : mframes.
mframes/cons : mframes -> mstore -> label -> mframes.

mframes/final = mframes/cons mframes/nil mstore/nil.



mvar-lookup : mstore -> nat -> mvalue -> type. %name mvar-lookup DVL.
%mode mvar-lookup +Alpha +I -R.

mvar-lookup/here : mvar-lookup (mstore/cons Alpha R) z R.

mvar-lookup/there : mvar-lookup (mstore/cons Alpha R') (s I) R
                     <- mvar-lookup Alpha I R.



label-lookup : mprog -> label -> mblock -> type. %name label-lookup DLL.
%mode label-lookup +Q +L -B.

label-lookup/here : label-lookup (mprog/cons L B Q) L B.

label-lookup/there : label-lookup (mprog/cons L' B' Q) L B
                      <- label-lookup Q L B.

% not deterministic etc.; problem?
% in paper version, there should be a side condition (L' /= L).



mstep : mprog -> mframes -> mblock -> rstack -> mframes -> mblock -> rstack -> type. %name mstep DM.
%mode mstep +Q +Gamma +B +Phi -Gamma' -B' -Phi'.

mstep/pushnum : mstep Q (mframes/cons Gamma Alpha L) (mpushnum N ; B) Phi
                        (mframes/cons Gamma Alpha L) B (rstack/cons Phi (rnum N)).

mstep/pushvar : mstep Q (mframes/cons Gamma Alpha L) (mpushvar I ; B) Phi
                        (mframes/cons Gamma Alpha L) B (rstack/cons Phi R)
                 <- mvar-lookup Alpha I R.

mstep/pushclos : mstep Q (mframes/cons Gamma Alpha L) (mpushclos L' ; B) Phi
                         (mframes/cons Gamma Alpha L) B (rstack/cons Phi (rclos Alpha L')).

mstep/call : mstep Q (mframes/cons Gamma Alpha L) (mcall L'') (rstack/cons (rstack/cons Phi (rclos Alpha' L')) R)
                     (mframes/cons (mframes/cons Gamma Alpha L) (mstore/cons Alpha' R) L'') B Phi
              <- label-lookup Q L' B.

mstep/ret : mstep Q (mframes/cons (mframes/cons Gamma Alpha L) Alpha' L') mret (rstack/cons Phi R)
                    (mframes/cons Gamma Alpha L) B (rstack/cons Phi R)
             <- label-lookup Q L' B.



msteps : mprog -> mframes -> mblock -> rstack -> mframes -> mblock -> rstack -> type. %name ssteps DMM.
%mode msteps +Q +Gamma +B +Phi -Gamma' -B' -Phi'.

msteps/zero : msteps Q Gamma B Phi Gamma B Phi.

msteps/more : msteps Q Gamma B Phi Gamma'' B'' Phi''
               <- mstep Q Gamma B Phi Gamma' B' Phi'
               <- msteps Q Gamma' B' Phi' Gamma'' B'' Phi''.



meval : mblock -> mprog -> label -> mvalue -> type. %name meval DQ.
%mode meval +B +Q +L -R.

meval/ : meval B Q L R
          <- {l} msteps Q (mframes/final l) B rstack/nil
                          (mframes/final l) mret (rstack/single R).
