is-copy : mprog -> nat -> nat -> paddr -> paddr -> type.
%mode is-copy +Q +N +O +K -K'.

is-copy/z : is-copy Q z O K K.

is-copy/s : is-copy Q (s N) O K K'
             <- prog-fetch Q K mgetenv
             <- prog-fetch Q (s K) (mload O)
             <- prog-fetch Q (s (s K)) (mstore O)
             <- is-copy Q N (s O) (s (s (s K))) K'.



is-return-or-halt : mprog -> paddr -> type.
%mode is-return-or-halt +Q +K.

is-return-or-halt/return : is-return-or-halt Q K
                            <- prog-fetch Q K mgetret
                            <- prog-fetch Q (s K) mjump.

is-return-or-halt/halt : is-return-or-halt Q K
                          <- prog-fetch Q K mhalt.



cor-prog : mprog -> paddr -> sprog -> paddr -> type.
%mode cor-prog +Q +K -P -K'.

cor-prog-1 : mprog -> paddr -> minst -> sprog -> paddr -> type.
%mode cor-prog-1 +Q +K +M -P -K'.

cor-fun : mprog -> paddr -> sprog -> type.
%mode cor-fun +Q +K -P.



% cor-prog
cor-prog/ : cor-prog Q K P K'
             <- prog-fetch Q K M
             <- cor-prog-1 Q K M P K'.

% cor-prog-1
cor-prog-1/num : cor-prog-1 Q K (mpushnum N) (sprog/cons (snum N) P) K'
                  <- cor-prog Q (s K) P K'.

cor-prog-1/var/z : cor-prog-1 Q K mgetarg (sprog/cons (svar z) P) K'
                    <- cor-prog Q (s K) P K'.

cor-prog-1/var/s : cor-prog-1 Q K mgetenv (sprog/cons (svar I) P) K'
                    <- prog-fetch Q (s K) (mload I)
                    <- cor-prog Q (s (s K)) P K'.

cor-prog-1/lam : cor-prog-1 Q K (malloc (s (s N))) (sprog/cons (slam P') P) K'
                  <- prog-fetch Q (s K) (mpushpaddr KK)
                  <- prog-fetch Q (s (s K)) (mstore 0)
                  <- prog-fetch Q (s (s (s K))) mgetarg
                  <- prog-fetch Q (s (s (s (s K)))) (mstore 1)
                  <- is-copy Q N 1 (s (s (s (s (s K))))) K''
                  <- cor-fun Q KK P'
                  <- cor-prog Q K'' P K'.

cor-prog-1/app : cor-prog-1 Q K (mgetaddr 5) (sprog/cons sapp P) K'
                  <- prog-fetch Q (s K) (mpeek 2)
                  <- prog-fetch Q (s (s K)) (mload 0)
                  <- prog-fetch Q (s (s (s K))) mnewframe
                  <- prog-fetch Q (s (s (s (s K)))) mjump
                  <- prog-fetch Q (s (s (s (s (s K))))) mendframe
                  <- cor-prog Q (s (s (s (s (s (s K)))))) P K'.

cor-prog-1/suc : cor-prog-1 Q K minc (sprog/cons ssuc P) K'
                  <- cor-prog Q (s K) P K'.

cor-prog-1/ret : cor-prog-1 Q K mgetret sprog/nil K.

cor-prog-1/halt : cor-prog-1 Q K mhalt sprog/nil K.



% cor-fun
cor-fun/ : cor-fun Q K P
            <- cor-prog Q K P K'
            <- is-return-or-halt Q K'.



cor-value : mprog -> mheap -> mvalue -> svalue -> type.
%mode cor-value +Q +H +R -W.

cor-env : mprog -> mheap -> mblock -> sstore -> type.
%mode cor-env +Q +H +B -Tau.



% cor-env
cor-env/nil : cor-env Q H mblock/nil sstore/nil.

cor-env/cons : cor-env Q H (mblock/cons R B) (sstore/cons Tau W)
                <- cor-value Q H R W
                <- cor-env Q H B Tau.



% cor-value
cor-value/num : cor-value Q H (rnum N) (wnum N).

cor-value/haddr : cor-value Q H (rhaddr A) (wclos Tau P)
                   <- heap-fetch-block H A (mblock/cons (rpaddr K) B)
                   <- cor-env Q H B Tau
                   <- cor-fun Q K P.

% No rule for paddr!

cor-value/undef : cor-value Q H rundef (wnum 0).



cor-mregs-wstack : mprog -> mheap -> mregs -> wstack -> wstack -> type.
%mode cor-mregs-wstack +Q +H +Phi +Psi -Psi'.

cor-mregs-wstack/nil : cor-mregs-wstack Q H mregs/nil Psi Psi.

cor-mregs-wstack/cons : cor-mregs-wstack Q H (mregs/cons Phi R) Psi (wstack/cons Psi' W)
                         <- cor-value Q H R W
                         <- cor-mregs-wstack Q H Phi Psi Psi'.



cor-arg-env : mprog -> mheap -> mvalue -> mvalue -> sstore -> type.
%mode cor-arg-env +Q +H +Arg +Env -Tau.

cor-arg/undef : cor-arg-env Q H rundef rundef sstore/nil.

cor-arg/def : cor-arg-env Q H Arg (rhaddr Env) (sstore/cons Tau W)
               <- cor-value Q H Arg W
               <- heap-fetch-block H Env (mblock/cons K B)
               <- cor-env Q H B Tau.



cor-stack : mprog -> mheap -> mstack -> paddr -> frames -> wstack -> type.
%mode cor-stack +Q +H +Gamma +K -Xi -Psi.

cor-stack/nil : cor-stack Q H mstack/nil K frames/nil wstack/nil.

cor-stack/cons : cor-stack Q H (mstack/cons Gamma (fr Phi Env Arg (rpaddr Ret))) K (frames/cons Xi Tau P) Psi'
                  <- cor-stack Q H Gamma Ret Xi Psi
                  <- cor-mregs-wstack Q H Phi Psi Psi'
                  <- cor-arg-env Q H Arg Env Tau
                  <- cor-fun Q K P.



completeness-sm : {Q} cor-stack Q H (mstack/cons Gamma F) K Xi Psi -> sstep Xi Psi Xi' Psi'
               -> msteps Q H Gamma F K H' Gamma' F' K' -> cor-stack Q H' (mstack/cons Gamma' F') K' Xi' Psi'
               -> type.
%mode completeness-sm +Q +DCS +DP -DQ -DCS'.

completeness-sm/num
   : completeness-sm Q
      (cor-stack/cons (cor-fun/ IROH (cor-prog/ (cor-prog-1/num DCP) DF)) DCAE DCRS DCS)
      sstep/num (msteps/single (mstep/ mexec/pushnum DF))
      (cor-stack/cons (cor-fun/ IROH DCP) DCAE (cor-mregs-wstack/cons DCRS cor-value/num) DCS).



lemma : trans-sm P Q K -> cor-prog Q K P K' -> prog-fetch Q K' mhalt -> type.



% Test
p1 = sprog/cons (slam (sprog/single (svar z))) (sprog/cons (snum 3) (sprog/single sapp)).
%define q1 = Q
%define k1 = K
%solve _ : trans-sm p1 Q K.

%query 1 1 cor-prog q1 k1 P K.
