mprog-length : mprog -> nat -> type.
%mode mprog-length +Q -N.

mprog-length/nil : mprog-length mprog/nil z.

mprog-length/cons : mprog-length (mprog/cons M Q) (s N)
                     <- mprog-length Q N.

%worlds () (mprog-length _ _).
%total Q (mprog-length Q _).



shift1-minst : minst -> minst -> type.
%mode shift1-minst +M -M'.

shift1-minst/pushnum : shift1-minst (mpushnum N) (mpushnum N).

shift1-minst/pushvar : shift1-minst (mpushvar I) (mpushvar I).

shift1-minst/pushclos : shift1-minst (mpushclos L) (mpushclos (s L)).

shift1-minst/call : shift1-minst (mcall L) (mcall (s L)).

shift1-minst/ret : shift1-minst mret mret.

shift1-minst/halt : shift1-minst mhalt mhalt.

%worlds () (shift1-minst _ _).
%total {} (shift1-minst _ _).



shift1-mprog : mprog -> mprog -> type.
%mode shift1-mprog +Q -Q'.

shift1-mprog/nil : shift1-mprog mprog/nil mprog/nil.

shift1-mprog/cons : shift1-mprog (M ; Q) (M' ; Q')
                     <- shift1-minst M M'
                     <- shift1-mprog Q Q'.

%worlds () (shift1-mprog _ _).
%total Q (shift1-mprog Q _).



shift-minst : nat -> minst -> minst -> type.
%mode shift-minst +S +M -M'.

shift-minst/z : shift-minst z M M.

shift-minst/s : shift-minst (s S) M M''
                 <- shift1-minst M M'
                 <- shift-minst S M' M''.

%worlds () (shift-minst _ _ _).
%total S (shift-minst S _ _).



shift-mprog : nat -> mprog -> mprog -> type.
%mode shift-mprog +S +Q -Q'.

shift-mprog/z : shift-mprog z Q Q.

shift-mprog/s : shift-mprog (s S) Q Q''
                 <- shift1-mprog Q Q'
                 <- shift-mprog S Q' Q''.

%worlds () (shift-mprog _ _ _).
%total S (shift-mprog S _ _).



shift1-minst-exists : shift1-minst M M^1 -> type.
%mode +{M} -{M^1} -{M->M^1 : shift1-minst M M^1} shift1-minst-exists M->M^1.

shift1-minst-exists/pushnum : shift1-minst-exists shift1-minst/pushnum.

shift1-minst-exists/pushvar : shift1-minst-exists shift1-minst/pushvar.

shift1-minst-exists/pushclos : shift1-minst-exists shift1-minst/pushclos.

shift1-minst-exists/call : shift1-minst-exists shift1-minst/call.

shift1-minst-exists/ret : shift1-minst-exists shift1-minst/ret.

shift1-minst-exists/halt : shift1-minst-exists shift1-minst/halt.

%worlds () (shift1-minst-exists _).
%total {} (shift1-minst-exists _).



shift1-mprog-exists : {M} shift1-mprog M M^1 -> type.
%mode shift1-mprog-exists +M -M->M^1.

shift1-mprog-exists/nil : shift1-mprog-exists _ shift1-mprog/nil.

shift1-mprog-exists/cons : shift1-mprog-exists _ (shift1-mprog/cons HQ HM)
                            <- shift1-mprog-exists _ HQ
                            <- shift1-minst-exists HM.

%worlds () (shift1-mprog-exists _ _).
%total M (shift1-mprog-exists M _).



shift-minst-exists : {S} shift-minst S M M^S -> type.
%mode +{S} +{M} -{M^S} -{M->M^S : shift-minst S M M^S} shift-minst-exists S M->M^S.

shift-minst-exists/z : shift-minst-exists z shift-minst/z.

shift-minst-exists/s : shift-minst-exists (s S) (shift-minst/s HH H)
                        <- shift1-minst-exists H
                        <- shift-minst-exists S HH.

%worlds () (shift-minst-exists _ _).
%total S (shift-minst-exists S _).



trans-sm' : sprog -> mprog -> type.
%mode trans-sm' +P -Q.

trans-sm'/num : trans-sm' (sprog/cons (snum N) P) (mpushnum N ; Q^1)
                <- trans-sm' P Q
                <- shift1-mprog Q Q^1.

trans-sm'/var : trans-sm' (sprog/cons (svar I) P) (mpushvar I ; Q^1)
                <- trans-sm' P Q
                <- shift1-mprog Q Q^1.

trans-sm'/lam : trans-sm' (sprog/cons (slam P') P) (mpushclos (s Q#) ; Q^1 ;; Q'^1+Q#)
                <- trans-sm' P Q
                <- shift1-mprog Q Q^1
                <- mprog-length Q^1 Q#
                <- trans-sm' P' Q'
                <- shift-mprog (s Q#) Q' Q'^1+Q#.

trans-sm'/app : trans-sm' (sprog/cons sapp P) (mcall 1 ; Q^1)
                <- trans-sm' P Q
                <- shift1-mprog Q Q^1.

trans-sm'/ret : trans-sm' sprog/nil (mret ; mprog/nil).

%worlds () (trans-sm' _ _).
%total P (trans-sm' P _).



trans-sm : sprog -> mprog -> label -> type.
%mode trans-sm +P -Q -L.

trans-sm/ : trans-sm P (mhalt ; Q^1) 1
             <- trans-sm' P Q
             <- shift1-mprog Q Q^1.
