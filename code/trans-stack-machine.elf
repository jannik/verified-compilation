mprog-length : mprog -> nat -> type.
%mode mprog-length +Q -N.

mprog-length/nil : mprog-length end z.

mprog-length/cons : mprog-length (M ; Q) (s N)
                     <- mprog-length Q N.

%worlds () (mprog-length _ _).
%total Q (mprog-length Q _).



% Accumulative approach to avoid append when right-consing.
%abbrev mprog-acc = mprog -> mprog.

%abbrev mprog-acc/nil : mprog-acc = [q] q.

%abbrev make-clos : nat -> nat -> mprog-acc
                                  = [k] [i] [q]
                                  %{ Registers: ... }%
                                     malloc (s (s i)) ;
                                  %{ Registers: ..., closure }%
                                     mpushpaddr k ;
                                  %{ Registers: ..., closure, code-address }%
                                     mstore 0 ;
                                  %{ Registers: ..., closure }%
                                     mgetarg ;
                                  %{ Registers: ..., closure, argument }%
                                     mstore 1 ;
                                  %{ Registers: ..., closure }%
                                     q.

%abbrev make-call : mprog-acc
                     = [q]
                     %{ Registers: ..., closure, argument }%
                        mgetaddr 5 ;
                     %{ Registers: ..., closure, argument, return-address }%
                        mpeek 2 ;
                     %{ Registers: ..., closure, argument, return-address, closure }%
                        mload 0 ;
                     %{ Registers: ..., closure, argument, return-address, target-address }%
                        mnewframe ;
                     %{ Note: new frame }%
                     %{ Registers: target-address }%
                        mjump ;
                     %{ Registers: return-value }%
                        mendframe ;
                     %{ Note: old frame }%
                     %{ Registers: ..., return-value }%
                        q.


trans-copy : nat -> nat -> mprog-acc -> type.
%mode trans-copy +N +O -Q.

trans-copy/z : trans-copy z O mprog-acc/nil.

trans-copy/s : trans-copy (s N) O ([q] mgetenv ; mload O ; mstore (s O) ; Q q)
                <- trans-copy N (s O) Q.

%worlds () (trans-copy _ _ _).
%total N (trans-copy N _ _).



trans-sm-acc : nat -> mprog-acc -> mprog-acc -> sexp -> mprog-acc -> mprog-acc -> type.
%mode trans-sm-acc +I +QQ +Q +S -QQ' -Q'.

trans-sms-acc : nat -> mprog-acc -> mprog-acc -> sprog -> mprog-acc -> mprog-acc -> type.
%mode trans-sms-acc +I +QQ +Q +P -QQ' -Q'.

% trans-sm-acc
trans-sm-acc/num : trans-sm-acc I QQ Q (snum N) QQ ([q] Q (mpushnum N ; q)).

trans-sm-acc/svar/z : trans-sm-acc I QQ Q (svar z) QQ ([q] Q (mgetarg ; q)).

trans-sm-acc/svar/s : trans-sm-acc I QQ Q (svar (s I')) QQ ([q] Q (mgetenv ; mload (s I') ; q)).

trans-sm-acc/lam : trans-sm-acc I QQ Q (slam P) ([q] QQ' (Q' (mgetret ; mjump ; q))) ([q] Q (make-clos K I (Q'' q)))
                    <- trans-sms-acc (s I) QQ mprog-acc/nil P QQ' Q'
                    <- mprog-length (QQ' end) K
                    <- trans-copy I 1 Q''.

trans-sm-acc/app : trans-sm-acc I QQ Q sapp QQ ([q] Q (make-call q)).

trans-sm-acc/suc : trans-sm-acc I QQ Q ssuc QQ ([q] Q (minc ; q)).

% trans-sm-acc/case : trans-sm-acc I QQ Q (scase P1 P2) ([q] QQ (Q' (Q'' q))) _
%                      <- trans-sms-acc I QQ mprog-acc/nil P1 QQ' Q'
%                      <- trans-sms-acc (s I) QQ' mprog-acc/nil P2 QQ'' Q''.

% trans-sms-acc
trans-sms-acc/nil : trans-sms-acc I QQ Q sprog/nil QQ Q.

trans-sms-acc/cons : trans-sms-acc I QQ Q (sprog/cons S P) QQ' Q'
                      <- trans-sm-acc I QQ Q S QQ'' Q''
                      <- trans-sms-acc I QQ'' Q'' P QQ' Q'.

%worlds () (trans-sm-acc _ _ _ _ _ _) (trans-sms-acc _ _ _ _ _ _).
%%total (S P) (trans-sm-acc _ _ _ S _ _) (trans-sms-acc _ _ _ P _ _).



trans-sm : sprog -> mprog -> nat -> type.
%mode trans-sm +P -Q -K.

trans-sm/ : trans-sm P (QQ (Q (mhalt ; end))) K
             <- trans-sms-acc z mprog-acc/nil mprog-acc/nil P QQ Q
             <- mprog-length (QQ end) K.
