eval : exp -> exp -> type.

eval/num : eval (num N) (num N).

eval/lam : eval (lam E) (lam E).

eval/app : eval (app E1 E2) C
            <- eval E1 (lam E0)
            <- eval E2 C2
            <- eval (E0 C2) C.

%worlds () (eval _ _).



rsubst : (var -> rexp) -> rexp -> rexp -> type.
%mode rsubst +R +S -R'.

rsubst/num : rsubst ([x] rnum N) S (rnum N).

rsubst/var-same : rsubst ([x] rvar x) S S.

rsubst/var-diff : rsubst ([x] rvar Y) S (rvar Y).

rsubst/lam : rsubst ([x] rlam (R x)) S (rlam R')
              <- {y} rsubst ([x] R x y) S (R' y).

rsubst/app : rsubst ([x] rapp (R1 x) (R2 x)) S (rapp R1' R2')
              <- rsubst R1 S R1'
              <- rsubst R2 S R2'.

%worlds (bl-var) (rsubst _ _ _).
%total R (rsubst R _ _).



reval : rexp -> rexp -> type.

reval/num : reval (rnum N) (rnum N).

reval/lam : reval (rlam R) (rlam R).

reval/app : reval (rapp R1 R2) S
             <- reval R1 (rlam R0)
             <- reval R2 S2
             <- rsubst R0 S2 R0'
             <- reval R0' S.



store : type. %name store Sigma.
value : type. %name value V.

store/nil : store.

store/cons : store -> value -> store.

vnum : nat -> value.

vclos : store -> bexp -> value.



beval-var : store -> nat -> value -> type.

beval-var/here : beval-var (store/cons Sigma V) z V.

beval-var/there : beval-var (store/cons Sigma V') (s I) V
                   <- beval-var Sigma I V.



beval : store -> bexp -> value -> type.

beval/num : beval Sigma (bnum N) (vnum N).

beval/var : beval Sigma (bvar I) V
             <- beval-var Sigma I V.

beval/lam : beval Sigma (blam B) (vclos Sigma B).

beval/app : beval Sigma (bapp B1 B2) V
             <- beval Sigma B1 (vclos Sigma' B0)
             <- beval Sigma B2 V2
             <- beval (store/cons Sigma' V2) B0 V.
