cor-bs : value -> svalue -> type. %name cor-bs DC.
comp-bs : store -> sstore -> type. %name comp-bs DD.

cor-bs/num : cor-bs (vnum N) (wnum N).

cor-bs/fun : cor-bs (vclos Sigma B) (wclos Tau P)
              <- comp-bs Sigma Tau
              <- trans-bs B P.

comp-bs/nil : comp-bs store/nil sstore/nil.

comp-bs/cons : comp-bs (store/cons Sigma V) (sstore/cons Tau W)
                <- comp-bs Sigma Tau
                <- cor-bs V W.



completeness-bs-var : beval-var Sigma I V -> comp-bs Sigma Tau
                   -> seval-var Tau I W -> cor-bs V W -> type.
%mode completeness-bs-var +DBV +DD -DSV -DC.

completeness-bs-var/here : completeness-bs-var beval-var/here (comp-bs/cons DC DD) seval-var/here DC.

completeness-bs-var/there : completeness-bs-var (beval-var/there DBV) (comp-bs/cons DC' DD) (seval-var/there DSV) DC
                             <- completeness-bs-var DBV DD DSV DC.

%worlds () (completeness-bs-var _ _ _ _).
%total DBV (completeness-bs-var DBV _ _ _).



ssteps/single : sstep Xi Psi Xi' Psi' -> ssteps Xi Psi Xi' Psi' = [ds] ssteps/more ssteps/zero ds.



cat-ssteps : ssteps Xi Psi Xi' Psi' -> ssteps Xi' Psi' Xi'' Psi'' -> ssteps Xi Psi Xi'' Psi'' -> type.
%mode cat-ssteps +DP1 +DP2 -DP3.

cat-ssteps/zero : cat-ssteps ssteps/zero DP2 DP2.

cat-ssteps/more : cat-ssteps (ssteps/more DP1 DS1) DP2 (ssteps/more DP3 DS1)
                   <- cat-ssteps DP1 DP2 DP3.

%worlds () (cat-ssteps _ _ _).
%total DP1 (cat-ssteps DP1 _ _).



s-compat-cor-bs : cor-bs (vnum N1) (wnum N2) -> cor-bs (vnum (s N1)) (wnum (s N2)) -> type.
%mode s-compat-cor-bs +DC -DC'.

- : s-compat-cor-bs cor-bs/num cor-bs/num.

%worlds () (s-compat-cor-bs _ _).
%total DC (s-compat-cor-bs DC _).



s-inj-cor-bs : cor-bs (vnum (s N1)) (wnum (s N2)) -> cor-bs (vnum N1) (wnum N2) -> type.
%mode s-inj-cor-bs +DC -DC'.

- : s-inj-cor-bs cor-bs/num cor-bs/num.

%worlds () (s-inj-cor-bs _ _).
%total DC (s-inj-cor-bs DC _).



completeness-bs' : trans-bs-acc B P2 P -> beval Sigma B V -> comp-bs Sigma Tau
                -> ssteps (frames/cons Xi Tau P) Psi (frames/cons Xi Tau P2) (wstack/cons Psi W)
                -> cor-bs V W -> type.
%mode +{B} +{P2} +{P} +{Sigma} +{V} +{Tau} +{Xi} +{Psi} -{W}
      +{DT:trans-bs-acc B P2 P} +{DB:beval Sigma B V} +{DD:comp-bs Sigma Tau}
      -{DP:ssteps (frames/cons Xi Tau P) Psi (frames/cons Xi Tau P2) (wstack/cons Psi W)}
      -{DC:cor-bs V W}
      completeness-bs' DT DB DD DP DC.

completeness-bs'/num : completeness-bs' trans-bs-acc/num beval/num DD (ssteps/single sstep/num) cor-bs/num.

completeness-bs'/var : completeness-bs' trans-bs-acc/var (beval/var DBV) DD
                                        (ssteps/single (sstep/var DSV)) DC
                        <- completeness-bs-var DBV DD DSV DC.

completeness-bs'/suc : completeness-bs' (trans-bs-acc/suc DT1) (beval/suc DB1) DD DP DC
                        <- completeness-bs' DT1 DB1 DD DP1 DC1
                        <- cat-ssteps DP1 (ssteps/single sstep/suc) DP
                        <- s-compat-cor-bs DC1 DC.

completeness-bs'/case/z : completeness-bs' (trans-bs-acc/case DT1 DT2 DT3) (beval/case/z DB2 DB1) DD
                                           DP DC2
                           <- completeness-bs' DT1 DB1 DD DP1 cor-bs/num
                           <- completeness-bs' DT2 DB2 DD DP2 DC2
                           <- cat-ssteps DP1 (ssteps/more DP2 sstep/case/z) DP12
                           <- cat-ssteps DP12 (ssteps/single sstep/ret) DP.

completeness-bs'/case/s : completeness-bs' (trans-bs-acc/case DT1 DT2 DT3) (beval/case/s DB3 DB1) DD
                                           DP DC3
                           <- completeness-bs' DT1 DB1 DD DP1 DC1
                           <- s-inj-cor-bs DC1 DC1'
                           <- completeness-bs' DT3 DB3 (comp-bs/cons DC1' DD) DP3 DC3
                           <- cat-ssteps DP1 (ssteps/more DP3 sstep/case/s) DP13
                           <- cat-ssteps DP13 (ssteps/single sstep/ret) DP.

completeness-bs'/lam : completeness-bs' (trans-bs-acc/lam DT1) beval/lam DD
                                        (ssteps/single sstep/lam) (cor-bs/fun DT1 DD).

completeness-bs'/app : completeness-bs' (trans-bs-acc/app DT1 DT2) (beval/app DB3 DB2 DB1) DD DP DC
                        <- completeness-bs' DT1 DB1 DD DP1 (cor-bs/fun DT0 DD0)
                        <- completeness-bs' DT2 DB2 DD DP2 DC2
                        <- completeness-bs' DT0 DB3 (comp-bs/cons DC2 DD0) DP3 DC
                        <- cat-ssteps DP1 DP2 DP12
                        <- cat-ssteps DP12 (ssteps/more DP3 sstep/app) DP123
                        <- cat-ssteps DP123 (ssteps/single sstep/ret) DP.

%worlds () (completeness-bs' _ _ _ _ _).
%total DB (completeness-bs' _ DB _ _ _).



coerce-seval-num : cor-bs (vnum N1) (wnum N2) -> seval P (wnum N2) -> seval P (wnum N1) -> type.
%mode coerce-seval-num +DC +DP -DP'.

- : coerce-seval-num cor-bs/num DP DP.

%worlds () (coerce-seval-num _ _ _).
%total (DC) (coerce-seval-num DC _ _).



completeness-bs : beval store/nil B (vnum N) -> trans-bs B P -> seval P (wnum N) -> type.
%mode completeness-bs +DB +DT -DP.

completeness-bs/ : completeness-bs DB DT DP
                    <- completeness-bs' DT DB comp-bs/nil DS* DC
                    <- cat-ssteps DS* (ssteps/more ssteps/zero sstep/ret) DS*'
                    <- coerce-seval-num DC (seval/ DS*') DP.

%worlds () (completeness-bs _ _ _).
%total DB (completeness-bs DB _ _).
