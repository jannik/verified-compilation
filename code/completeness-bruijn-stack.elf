eq-value : value -> value -> type.

eq-value/refl : eq-value V V.



eq-svalue : svalue -> svalue -> type.

eq-svalue/refl : eq-svalue W W.



invert-cor-bs-fun : cor-bs V W -> eq-svalue W (wclos Tau P) -> eq-value V (vclos Sigma B) -> trans-bs B P -> comp-bs Sigma Tau -> type.
%mode invert-cor-bs-fun +DC +DQW -DQV -DD -DT.

invert-cor-bs-fun/ : invert-cor-bs-fun (cor-bs/fun DT DD) eq-svalue/refl eq-value/refl DT DD.

%worlds () (invert-cor-bs-fun _ _ _ _ _).
%total {} (invert-cor-bs-fun _ _ _ _ _).



invert-ssteps-app : ssteps (frames/cons Xi Tau (sprog/cons sapp P)) (wstack/cons (wstack/cons Psi W1) W2) frames/nil Psi'
                 -> eq-svalue W1 (wclos Tau' P') -> ssteps (frames/cons (frames/cons Xi Tau P) (sstore/cons Tau' W2) P') Psi frames/nil Psi' -> type.
%mode invert-ssteps-app +DP -DQ -DP'.

invert-ssteps-app/ : invert-ssteps-app (ssteps/more DP sstep/app) eq-svalue/refl DP.

%worlds () (invert-ssteps-app _ _ _).
%reduces DP' < DP (invert-ssteps-app DP _ DP').
%total {} (invert-ssteps-app _ _ _).



coerce-beval : beval Sigma B V -> eq-value V V' -> beval Sigma B V' -> type.
%mode coerce-beval +DB +DQV -DB'.

coerce-beval/ : coerce-beval DB eq-value/refl DB.

%worlds () (coerce-beval _ _ _).
%total {} (coerce-beval _ _ _).



completeness-bs-var : seval-var Tau I W -> comp-bs Sigma Tau -> beval-var Sigma I V -> cor-bs V W -> type.
%mode completeness-bs-var +DSV +DD -DBV -DC.

completeness-bs-var/here : completeness-bs-var seval-var/here (comp-bs/cons DC DD) beval-var/here DC.

completeness-bs-var/there : completeness-bs-var (seval-var/there DSV) (comp-bs/cons DC' DD) (beval-var/there DBV) DC
                             <- completeness-bs-var DSV DD DBV DC.

%worlds () (completeness-bs-var _ _ _ _).
%total DSV (completeness-bs-var DSV _ _ _).



completeness-bs' : ssteps (frames/cons Xi Tau P1-P2) Psi frames/nil (wstack/cons wstack/nil W')-> trans-bs-acc B P2 P1-P2
                -> comp-bs Sigma Tau -> beval Sigma B V -> cor-bs V W -> ssteps (frames/cons Xi Tau P2) (wstack/cons Psi W) frames/nil (wstack/cons wstack/nil W') -> type.
%mode completeness-bs' +DP +DT +DD -DB -DC -DP'.

completeness-bs'/num : completeness-bs' (ssteps/more DP sstep/num) trans-bs-acc/num DD beval/num cor-bs/num DP.

completeness-bs'/var : completeness-bs' (ssteps/more DP (sstep/var DSV)) trans-bs-acc/var DD (beval/var DBV) DC DP
                        <- completeness-bs-var DSV DD DBV DC.

completeness-bs'/lam : completeness-bs' (ssteps/more DP sstep/lam) (trans-bs-acc/lam DT) DD beval/lam (cor-bs/fun DT DD) DP.

completeness-bs'/app : completeness-bs' DP (trans-bs-acc/app DT1 DT2) DD (beval/app DB3 DB2 DB1') DC DP4
                        <- completeness-bs' DP DT1 DD DB1 DC1 DP1
                        <- completeness-bs' DP1 DT2 DD DB2 DC2 DP2
                        <- invert-ssteps-app DP2 DQW DP3
                        <- invert-cor-bs-fun DC1 DQW DQV DT3 DD'
                        <- coerce-beval DB1 DQV DB1'
                        <- completeness-bs' DP3 DT3 (comp-bs/cons DC2 DD') DB3 DC (ssteps/more DP4 sstep/ret).

%worlds () (completeness-bs' _ _ _ _ _ _).
%reduces DP' < DP (completeness-bs' DP _ _ _ _ DP').
%total {DP DT} (completeness-bs' DP DT _ _ _ _).



coerce-cor-bs : sstep (frames/cons Xi Tau sprog/nil) (wstack/cons Psi W1) Xi (wstack/cons Psi W2)
             -> cor-bs V W1 -> cor-bs V W2 -> type.
%mode coerce-cor-bs +DS +DC -DC'.

- : coerce-cor-bs sstep/ret DC DC.

%worlds () (coerce-cor-bs _ _ _).
%total DS (coerce-cor-bs DS _ _).



coerce-beval-num : cor-bs (vnum N1) (wnum N2) -> beval Sigma B (vnum N1) -> beval Sigma B (vnum N2) -> type.
%mode coerce-beval-num +DC +DB -DB'.

- : coerce-beval-num cor-bs/num DB DB.

%worlds () (coerce-beval-num _ _ _).
%total DC (coerce-beval-num DC _ _).



completeness-bs : seval P (wnum N) -> trans-bs B P -> beval store/nil B (vnum N) -> type.
%mode completeness-bs +DP +DT -DB.

completeness-bs/ : completeness-bs (seval/ DS*) DT DB'
                    <- completeness-bs' DS* DT comp-bs/nil DB DC (ssteps/single DS)
                    <- coerce-cor-bs DS DC DC'
                    <- coerce-beval-num DC' DB DB'.

%worlds () (completeness-bs _ _ _).
%total DP (completeness-bs DP _ _).
