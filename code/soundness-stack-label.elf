leq : mprog -> mprog -> (label -> label) -> type. %name leq DLE.

leq/left : leq Q' (mprog/node Q1 Q2) left
            <- shift-mprog left Q' Q1.

leq/right : leq Q' (mprog/node Q1 Q2) right
             <- shift-mprog right Q' Q2.

leq/next : leq Q' (mprog/cons B Q1) next
            <- shift-mprog next Q' Q1.

leq/refl : leq Q' Q' ([l] l).

leq/trans : leq Q' Q (G o F)
             <- leq Q' Q'' F
             <- leq Q'' Q G.



shift-mblock-refl : shift-mblock ([l] l) B B -> type.
%mode +{B : mblock} -{DH : shift-mblock ([l] l) B B} shift-mblock-refl DH.



shift-mblock-trans : shift-mblock F B B' -> shift-mblock G B' B'' -> shift-mblock (G o F) B B'' -> type.
%mode shift-mblock-trans +DH +DH' -DH''.



shift-mprog-trans : shift-mprog F Q Q' -> shift-mprog G Q' Q'' -> shift-mprog (G o F) Q Q'' -> type.
%mode shift-mprog-trans +DH +DH' -DH''.



lookup-respects-shift : label-lookup Q' L B' -> shift-mprog F Q' Q -> label-lookup Q L B -> shift-mblock F B' B -> type.
%mode lookup-respects-shift +DLL +DH -DLL' -DH'.



lookup-respects-leq : leq Q' Q F -> label-lookup Q' L B' -> label-lookup Q (F L) B -> shift-mblock F B' B -> type.
%mode lookup-respects-leq +DLE +DLL -DLL' -DH'.

lookup-respects-leq/left
   : lookup-respects-leq (leq/left DH : leq Q' (mprog/node Q1 Q2) left) (DLL : label-lookup Q' L B')
                         (label-lookup/left (DLL' : label-lookup Q1 L B)) DH'
      <- lookup-respects-shift DLL DH DLL' DH'.

lookup-respects-leq/right
   : lookup-respects-leq (leq/right DH) DLL (label-lookup/right DLL') DH'
      <- lookup-respects-shift DLL DH DLL' DH'.

lookup-respects-leq/next
   : lookup-respects-leq (leq/next DH) DLL (label-lookup/next DLL') DH'
      <- lookup-respects-shift DLL DH DLL' DH'.

lookup-respects-leq/refl
   : lookup-respects-leq leq/refl DLL DLL DH
      <- shift-mblock-refl DH.

lookup-respects-leq/trans
   : lookup-respects-leq (leq/trans DLE2 DLE1) DLL DLL' DH
      <- lookup-respects-leq DLE1 DLL DLL'' DH''
      <- lookup-respects-leq DLE2 DLL'' DLL' DH'
      <- shift-mblock-trans DH'' DH' DH.



cor-value : mprog -> svalue -> mvalue -> type.

cor-store : mprog -> sstore -> mstore -> type.

% cor-value

cor-value/num : cor-value Q (wnum N) (rnum N).

cor-value/clos : cor-value Q (wclos Tau P) (rclos Alpha L)
                  <- cor-store Q Tau Alpha
                  <- label-lookup Q L B
                  <- trans-sm P B' Q'
                  <- leq Q' Q F
                  <- shift-mblock F B' B.

% cor-store

cor-store/nil : cor-store Q sstore/nil mstore/nil.

cor-store/cons : cor-store Q (sstore/cons Tau W) (mstore/cons Alpha R)
                  <- cor-store Q Tau Alpha
                  <- cor-value Q W R.



cor-stack : mprog -> frames -> mblock -> mframes -> type.

cor-stack/nil : cor-stack Q frames/nil mhalt mframes/nil.

cor-stack/cons : cor-stack Q (frames/cons Xi Tau P) B (mframes/cons Gamma Alpha L)
                  <- cor-stack Q Xi B' Gamma
                  <- cor-store Q Tau Alpha
                  <- label-lookup Q L B'
                  <- trans-sm P B'' Q'
                  <- leq Q' Q F
                  <- shift-mblock F B'' B.



cor-value-stack : mprog -> wstack -> rstack -> type.

cor-value-stack/nil : cor-value-stack Q wstack/nil rstack/nil.

cor-value-stack/cons : cor-value-stack Q (wstack/cons Psi W) (rstack/cons Phi R)
                        <- cor-value-stack Q Psi Phi
                        <- cor-value Q W R.



soundness-sm'
   : msteps Q Gamma B Phi
      mframes/nil mhalt (rstack/single R)
      -> cor-stack Q Xi B Gamma
      -> cor-value-stack Q Psi Phi
      -> ssteps Xi Psi frames/nil (wstack/single W)
      -> cor-value Q W R
      -> type.
%mode soundness-sm' +DMM +DCS +DCV -DP -DC.

soundness-sm'/halt
   : soundness-sm' msteps/zero cor-stack/nil (cor-value-stack/cons DC cor-value-stack/nil)
                   ssteps/zero DC.

soundness-sm'/num
   : soundness-sm' (msteps/more DMM mstep/pushnum) (cor-stack/cons (shift-mblock/cons DH shift-minst/pushnum) DLE (trans-sm/num DT) DLL DCE DCS) DCV
                   (ssteps/more DP sstep/num) DC
      <- soundness-sm' DMM (cor-stack/cons DH DLE DT DLL DCE DCS) (cor-value-stack/cons cor-value/num DCV)
                       DP DC.

% soundness-sm'/var
%    : soundness-sm' (msteps/more DMM mstep/var)


soundness-sm'/lam
   : soundness-sm' (msteps/more (DMM : msteps Q1 (mframes/cons Gamma Alpha L) B _ _ _ _) mstep/pushclos)
                   (cor-stack/cons
                      (shift-mblock/cons DH'' shift-minst/pushclos)
                      (DLE : leq (mprog/node Q' (mprog/cons BB' QQ')) Q1 F)
                      (trans-sm/lam
                         (shift-mprog/cons DHH DBB : shift-mprog right (mprog/cons BB QQ) (mprog/cons BB' QQ'))
                         (DH : shift-mprog left Q Q')
                         (DHB : shift-mblock left B B')
                         (trans-sm-fun/ DH1 DH2 DTT : trans-sm-fun PP (mprog/cons BB QQ)) (DT : trans-sm P B Q))
                      DLL
                      DCE 
                      DCS)
                   DCV
                   (ssteps/more DP sstep/lam)
                   DC
      <- shift-mblock-trans DHB DH'' DH'''
      <- lookup-respects-leq DLE (label-lookup/right label-lookup/here) DLLL DH4
      <- shift-mprog-trans DH2 DHH DH47
      <- shift-mblock-trans DH1 DBB DHHH
      <- shift-mblock-trans DHHH DH4 DHHH'
      <- soundness-sm' DMM (cor-stack/cons DH''' (leq/trans DLE (leq/left DH)) DT DLL DCE DCS)
           (cor-value-stack/cons
              (cor-value/clos
                 (DHHH')
                 (leq/trans DLE (leq/trans (leq/right (shift-mprog/cons DHH DBB)) (leq/next DH2)) : leq Q2 Q1 (F o right o next))
                 DTT DLLL DCE)
              DCV)
         DP
         DC.



soundness-sm : trans-sm P B Q -> meval B Q (rnum N) -> seval P (wnum N) -> type.
%mode soundness-sm +DT +DQ -DP.

soundness-sm/ : soundness-sm DT (meval/ DMM) (seval/ DP)
                 <- shift-mblock-refl DH
                 <- soundness-sm' DMM (cor-stack/cons DH leq/refl DT label-lookup/done cor-store/nil cor-stack/nil) cor-value-stack/nil
                                  DP cor-value/num.



% test4 : exp = app (app (app (lam [f] lam [x] app f x) (lam [x] lam [y] x)) (num 3)) (num 5).
% test4 = app (app (lam [x] lam [y] x) (num 4)) (num 5).
test4 : exp = app (lam [x] x) (num 3).

%define btest4 = B
%solve _ : trans-hb-pseudo-exists test4 (DT : trans-hb store/nil B test4).

%define ptest4 = P
%solve _ : trans-bs btest4 P.

%define qtest4 = Q
%define qtest4-block = B
%solve _ : trans-sm ptest4 B Q.

%query 1 1 meval qtest4-block qtest4 R.
