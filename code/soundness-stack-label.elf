soundness-sm-var : mvar-lookup Alpha I R -> cor-store Q Tau Alpha -> seval-var Tau I W -> cor-value Q W R -> type.
%mode soundness-sm-var +DVL +DCE -DSV -DC.

soundness-sm-var/here : soundness-sm-var mvar-lookup/here (cor-store/cons DC DCE) seval-var/here DC.

soundness-sm-var/there : soundness-sm-var (mvar-lookup/there DVL) (cor-store/cons DC' DCE) (seval-var/there DSV) DC
                          <- soundness-sm-var DVL DCE DSV DC.

%worlds () (soundness-sm-var _ _ _ _).
%total DVL (soundness-sm-var DVL _ _ _).



coerce-msteps : msteps Q (mframes/cons (mframes/cons Gamma Alpha1 L1) Alpha2 L2) L3 Phi mframes/nil L4 (rstack/single R)
                 -> add 1 L2' L2
                 -> msteps Q (mframes/cons (mframes/cons Gamma Alpha1 L1) Alpha2 (s L2')) L3 Phi mframes/nil L4 (rstack/single R) -> type.
%mode coerce-msteps +DMM +DA -DMM'.

- : coerce-msteps DMM (add/s add/z) DMM.

%worlds () (coerce-msteps _ _ _).
%total {} (coerce-msteps _ _ _).
%reduces DMM = DMM' (coerce-msteps DMM _ DMM').



minst-equiv : minst -> minst -> type.

minst-equiv/pushnum : minst-equiv (mpushnum N) (mpushnum N).

minst-equiv/pushvar : minst-equiv (mpushvar I) (mpushvar I).

minst-equiv/pushclos : minst-equiv (mpushclos L) (mpushclos L').

minst-equiv/call : minst-equiv (mcall L) (mcall L').

minst-equiv/ret : minst-equiv mret mret.

minst-equiv/halt : minst-equiv mhalt mhalt.



minst-equiv-trans : minst-equiv M M' -> minst-equiv M' M'' -> minst-equiv M M'' -> type.
%mode minst-equiv-trans +MQ1 +MQ2 -MQ.

minst-equiv-trans/pushnum : minst-equiv-trans minst-equiv/pushnum minst-equiv/pushnum minst-equiv/pushnum.

minst-equiv-trans/pushvar : minst-equiv-trans minst-equiv/pushvar minst-equiv/pushvar minst-equiv/pushvar.

minst-equiv-trans/pushclos : minst-equiv-trans minst-equiv/pushclos minst-equiv/pushclos minst-equiv/pushclos.

minst-equiv-trans/call : minst-equiv-trans minst-equiv/call minst-equiv/call minst-equiv/call.

minst-equiv-trans/ret : minst-equiv-trans minst-equiv/ret minst-equiv/ret minst-equiv/ret.

minst-equiv-trans/halt : minst-equiv-trans minst-equiv/halt minst-equiv/halt minst-equiv/halt.

%worlds () (minst-equiv-trans _ _ _).
%total {} (minst-equiv-trans _ _ _).



shift-minst-equiv : shift-minst S M M^S -> minst-equiv M M^S -> type.
%mode shift-minst-equiv +H -MQ.

shift-minst-equiv/z/pushnum : shift-minst-equiv shift-minst/z minst-equiv/pushnum.

shift-minst-equiv/z/pushvar : shift-minst-equiv shift-minst/z minst-equiv/pushvar.

shift-minst-equiv/z/pushclos : shift-minst-equiv shift-minst/z minst-equiv/pushclos.

shift-minst-equiv/z/call : shift-minst-equiv shift-minst/z minst-equiv/call.

shift-minst-equiv/z/ret : shift-minst-equiv shift-minst/z minst-equiv/ret.

shift-minst-equiv/z/halt : shift-minst-equiv shift-minst/z minst-equiv/halt.

shift-minst-equiv/s/pushnum : shift-minst-equiv (shift-minst/s H shift1-minst/pushnum) MQ
                               <- shift-minst-equiv H MQ.

shift-minst-equiv/s/pushvar : shift-minst-equiv (shift-minst/s H shift1-minst/pushvar) MQ
                               <- shift-minst-equiv H MQ.

shift-minst-equiv/s/pushclos : shift-minst-equiv (shift-minst/s H shift1-minst/pushclos) MQ
                                <- shift-minst-equiv H MQ'
                                <- minst-equiv-trans minst-equiv/pushclos MQ' MQ.

shift-minst-equiv/s/call : shift-minst-equiv (shift-minst/s H shift1-minst/call) MQ
                            <- shift-minst-equiv H MQ'
                            <- minst-equiv-trans minst-equiv/call MQ' MQ.

shift-minst-equiv/s/ret : shift-minst-equiv (shift-minst/s H shift1-minst/ret) MQ
                               <- shift-minst-equiv H MQ.

shift-minst-equiv/s/halt : shift-minst-equiv (shift-minst/s H shift1-minst/halt) MQ
                               <- shift-minst-equiv H MQ.


%worlds () (shift-minst-equiv _ _).
%total H (shift-minst-equiv H _).



good-stack : cor-stack Q Xi L Gamma -> type.

good-stack/ : good-stack (cor-stack/cons (DLE : leq (M ; Q') Q S) DT DCE DCS)
               <- shift-minst S M M^S
               <- minst-equiv M M^S
               <- label-lookup Q S M^S.



soundness-sm'-aux
   : cor-value-stack Q Psi Phi
      -> {DCS : cor-stack Q Xi L Gamma} good-stack DCS
      -> msteps Q Gamma L Phi mframes/nil L' (rstack/single R)
      -> label-lookup Q L' mhalt
      -> ssteps Xi Psi frames/nil (wstack/single W)
      -> cor-value Q W R
      -> type.
%mode soundness-sm'-aux +DCV +DCS +DGS +DMM +DLL -DP -DC.

soundness-sm'
   : cor-value-stack Q Psi Phi
      -> cor-stack Q Xi L Gamma
      -> msteps Q Gamma L Phi mframes/nil L' (rstack/single R)
      -> label-lookup Q L' mhalt
      -> ssteps Xi Psi frames/nil (wstack/single W)
      -> cor-value Q W R
      -> type.
%mode soundness-sm' +DCV +DCS +DMM +DLL -DP -DC.



% soundness-sm'-aux

soundness-sm'-aux/num
   : soundness-sm'-aux DCV (cor-stack/cons Pushnum;Q1^1<Q (trans-sm'/num H DT) DCE DCS) (good-stack/ DLL-Pushnum' MQ H') (msteps/more DMM (mstep/pushnum DLL-Pushnum)) DLL-Halt (ssteps/more DP sstep/num) DC
      <- leq-cons H Pushnum;Q1^1<Q Q1<Q
      <- soundness-sm' (cor-value-stack/cons cor-value/num DCV) (cor-stack/cons Q1<Q DT DCE DCS) DMM DLL-Halt DP DC.

soundness-sm'-aux/var
   : soundness-sm'-aux DCV (cor-stack/cons Pushvar;Q1^1<Q (trans-sm'/var H DT) DCE DCS) (good-stack/ DLL-Pushvar' MQ H') (msteps/more DMM (mstep/pushvar DVL DLL-Pushvar)) DLL-Halt (ssteps/more DP (sstep/var DSV)) DC
      <- soundness-sm-var DVL DCE DSV DC'
      <- leq-cons H Pushvar;Q1^1<Q Q1<Q
      <- soundness-sm' (cor-value-stack/cons DC' DCV) (cor-stack/cons Q1<Q DT DCE DCS) DMM DLL-Halt DP DC.

soundness-sm'-aux/lam
   : soundness-sm'-aux DCV (cor-stack/cons Pushclos;Q1^1;;Q2^1+Q1#<Q (trans-sm'/lam Q2->Q2^1+Q1# DT2 Q1Len Q1->Q1^1 DT1) DCE DCS) (good-stack/ DLL-Pushclos' MQ H' %{(shift-minst/pushclos DA)}%) (msteps/more DMM (mstep/pushclos DLL-Pushclos)) DLL-Halt (ssteps/more DP sstep/lam) DC
      <- shift-minst-pushclos-inv H' DA
      <- add-comm DA DA'
      <- leq-infix (mpushclos (s Q1#) ; Q1^1) mprog/nil Q2->Q2^1+Q1# (mprog-length/cons Q1Len) Q2<Pushclos;Q1^1;;Q2^1+Q1#
      <- leq-infix (mpushclos (s Q1#) ; mprog/nil) Q2^1+Q1# Q1->Q1^1 (mprog-length/cons mprog-length/nil) Q1<Pushclos;Q1^1;;Q2^1+Q1#
      <- leq-trans Q2<Pushclos;Q1^1;;Q2^1+Q1# Pushclos;Q1^1;;Q2^1+Q1#<Q DA' Q2<Q
      <- leq-trans Q1<Pushclos;Q1^1;;Q2^1+Q1# Pushclos;Q1^1;;Q2^1+Q1#<Q (add/s add/z) Q1<Q
      <- soundness-sm'
         (cor-value-stack/cons (cor-value/clos Q2<Q DT2 DCE) DCV)
         (cor-stack/cons Q1<Q DT1 DCE DCS)
         DMM DLL-Halt DP DC.

soundness-sm'-aux/app
   : soundness-sm'-aux (cor-value-stack/cons DC-Arg (cor-value-stack/cons (cor-value/clos Q'<Q DT' DCE') DCV)) (cor-stack/cons Call;Q1^1<Q (trans-sm'/app H DT) DCE DCS) (good-stack/ (DLL-Call' : label-lookup _ _ (mcall L)) MQ H' %{(shift-minst/call DA)}%) (msteps/more DMM (mstep/call (DLL-Call : label-lookup _ _ (mcall L)))) DLL-Halt (ssteps/more DP sstep/app) DC
      <- shift-minst-call-inv H' DA
      <- add-comm DA DA'
      <- coerce-msteps DMM DA' DMM'
      <- leq-cons H Call;Q1^1<Q Q1<Q
      <- soundness-sm' DCV (cor-stack/cons Q'<Q DT' (cor-store/cons DC-Arg DCE') (cor-stack/cons Q1<Q DT DCE DCS)) DMM' DLL-Halt DP DC.

soundness-sm'-aux/ret
   : soundness-sm'-aux DCV (cor-stack/cons Ret<Q trans-sm'/ret DCE DCS) (good-stack/ DLL-Ret' MQ H') (msteps/more DMM (mstep/ret DLL-Ret)) DLL-Halt (ssteps/more DP sstep/ret) DC
      <- soundness-sm' DCV DCS DMM DLL-Halt DP DC.


% soundness-sm'

soundness-sm'/zero
   : soundness-sm' (cor-value-stack/cons DC cor-value-stack/nil) (cor-stack/nil DLL-Halt) msteps/zero DLL-Halt' ssteps/zero DC.

soundness-sm'/more
   : soundness-sm' DCV (cor-stack/cons DLE DT DCE DCS) (msteps/more DMM DM) DLL-Halt DP DC
      <- shift-minst-exists _ H
      <- shift-minst-equiv H MQ
      <- leq-lookup H DLE DLL-M
      <- soundness-sm'-aux DCV (cor-stack/cons DLE DT DCE DCS) (good-stack/ DLL-M MQ H) (msteps/more DMM DM) DLL-Halt DP DC.


%worlds () (soundness-sm'-aux _ _ _ _ _ _ _) (soundness-sm' _ _ _ _ _ _).
%covers soundness-sm'-aux +DCV +DCS +DGS +DMM +DLL -DP -DC.


%total (DMM1 DMM2) (soundness-sm'-aux _ _ _ DMM1 _ _ _) (soundness-sm' _ _ DMM2 _ _ _).



coerce-seval-num : cor-value Q (wnum N1) (rnum N2) -> seval P (wnum N1) -> seval P (wnum N2) -> type.
%mode coerce-seval-num +DC +DP -DP'.

- : coerce-seval-num cor-value/num DP DP.

%worlds () (coerce-seval-num _ _ _).
%total {} (coerce-seval-num _ _ _).



soundness-sm : trans-sm P B Q -> meval B Q (rnum N) -> seval P (wnum N) -> type.
%mode soundness-sm +DT +DQ -DP.

soundness-sm/ : soundness-sm (trans-sm/ Q->Q^1 DT) (meval/ DLL-Halt DMM) DP'
                 <- leq-infix (mhalt ; mprog/nil) mprog/nil Q->Q^1 (mprog-length/cons mprog-length/nil) DLE
                 <- soundness-sm' cor-value-stack/nil (cor-stack/cons DLE DT cor-store/nil (cor-stack/nil label-lookup/here)) DMM DLL-Halt DP DC
   <- coerce-seval-num DC (seval/ DP) DP'.

%worlds () (soundness-sm _ _ _).
%total {} (soundness-sm _ _ _).
