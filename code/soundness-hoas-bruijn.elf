soundness-hb'-var : eval E C -> trans-hb-var Sigma I E -> beval-var Sigma I V -> cor V C -> type.
%mode soundness-hb'-var -DE +DTV +DBV -DC.

soundness-hb'-var/here/num : soundness-hb'-var eval/num (trans-hb-var/here DC) beval-var/here DC.

soundness-hb'-var/here/fun : soundness-hb'-var eval/lam (trans-hb-var/here DC) beval-var/here DC.

soundness-hb'-var/there : soundness-hb'-var DE (trans-hb-var/there DTV) (beval-var/there DBV) DC
                           <- soundness-hb'-var DE DTV DBV DC.

%worlds () (soundness-hb'-var _ _ _ _).
%total (DTV) (soundness-hb'-var _ DTV _ _).



soundness-hb' : eval E C -> trans-hb Sigma B E -> beval Sigma B V -> cor V C -> type.
%mode soundness-hb' -DE +DT +DB -DC.

soundness-hb'/num : soundness-hb' eval/num trans-hb/num beval/num cor/num.

soundness-hb'/var : soundness-hb' DE (trans-hb/var DTV) (beval/var DBV) DC
                     <- soundness-hb'-var DE DTV DBV DC.

soundness-hb'/lam : soundness-hb' eval/lam (trans-hb/lam DT1) beval/lam (cor/fun (trans-hb/lam DT1)).

soundness-hb'/app : soundness-hb' (eval/app DE3 DE2 DE1) (trans-hb/app DT2 DT1) (beval/app DB3 DB2 DB1) DC3
                     <- soundness-hb' DE1 DT1 DB1 (cor/fun (trans-hb/lam [v] [x] [dc] DT v x dc))
                     <- soundness-hb' DE2 DT2 DB2 (DC2 : cor V2 C2)
                     <- soundness-hb' DE3 (DT V2 C2 DC2) DB3 DC3.

%{
soundness-hb'/suc : soundness-hb' (eval/suc DE1) (trans-hb/suc DT1) (beval/suc DB1) DC
                     <- soundness-hb' DE1 DT1 DB1 DC1
                     <- s-compat-cor DC1 DC.

soundness-hb'/case/z : soundness-hb' (eval/case/z DE2 DE1) (trans-hb/case DT3 DT2 DT1) (beval/case/z DB2 DB1) DC2
                        <- soundness-hb' DE1 DT1 DB1 cor/num
                        <- soundness-hb' DE2 DT2 DB2 DC2.

soundness-hb'/case/s : soundness-hb' (eval/case/s DE3 DE1) (trans-hb/case DT3 DT2 DT1) (beval/case/s DB3 DB1) DC3
                        <- soundness-hb' DE1 DT1 DB1 (DC1 : cor (vnum (s N1)) (num (s N2)))
                        <- s-inj-cor DC1 (DC1' : cor (vnum N1) (num N2))
                        <- soundness-hb' DE3 (DT3 (vnum N1) (num N2) DC1') DB3 DC3.
}%

%worlds () (soundness-hb' _ _ _ _).
%total (DB) (soundness-hb' _ _ DB _).



coerce-eval : cor (vnum N2) (num N1) -> eval E (num N1) -> eval E (num N2) -> type.
%mode coerce-eval +DC +DE -DE'.

- : coerce-eval cor/num DE DE.

%worlds () (coerce-eval _ _ _).
%total (DC) (coerce-eval DC _ _).



soundness-hb : beval store/nil B (vnum N) -> trans-hb store/nil B E -> eval E (num N) -> type.
%mode soundness-hb +DB +DT -DE.

soundness-hb/ : soundness-hb DB DT DE'
                 <- soundness-hb' DE DT DB DC
                 <- coerce-eval DC DE DE'.

%worlds () (soundness-hb _ _ _).
%total (DB) (soundness-hb DB _ _).
