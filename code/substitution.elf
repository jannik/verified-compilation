map : type. %name map Phi.

map/nil : map.
map/cons : map -> exp -> exp -> map.



lookup : map -> exp -> exp -> type. %name lookup DL.

lookup/here : lookup (map/cons Phi X C) X C.

lookup/there : lookup (map/cons Phi Y C') X C
                <- lookup Phi X C.



local : exp -> type. %name local L.

%block bl-local : block {x : exp} {l : local x}.



subst : map -> exp -> exp -> type. %name subst DS.

subst/num : subst Phi (num N) (num N).

subst/var : subst Phi X C
             <- lookup Phi X C.

subst/local : subst Phi X X
               <- local X.

subst/lam : subst Phi (lam [x] E x) (lam [x] E' x)
             <- {x} local x -> subst Phi (E x) (E' x).

subst/app : subst Phi (app E1 E2) (app E1' E2')
             <- subst Phi E1 E1'
             <- subst Phi E2 E2'.



empty-subst : {E} subst map/nil E E -> type.
%mode empty-subst +E -DS.

empty-subst/num : empty-subst (num N) subst/num.

empty-subst/lam : empty-subst (lam E) (subst/lam DS)
                   <- {x} {l} empty-subst x (subst/local l) ->  empty-subst (E x) (DS x l).

empty-subst/app : empty-subst (app E1 E2) (subst/app DS2 DS1)
                   <- empty-subst E1 DS1
                   <- empty-subst E2 DS2.

%block bl-empty-subst : block {x : exp} {l : local x} {pf : empty-subst x (subst/local l)}.

%worlds (bl-empty-subst) (empty-subst _ _).
%total (E) (empty-subst E _).



lookup-append : {E} {E'} {C} lookup Phi (E X) (E' X) -> lookup (map/cons Phi X C) (E X) (E' C) -> type.
%mode lookup-append +E +E' +C +DL -DL'.

% Missing implementation.

%worlds (bl-exp | bl-local) (lookup-append _ _ _ _ _).
% total (DL) (lookup-append _ _ _ DL _).



subst-append : {E} {E'} {C} subst Phi (E X) (E' X) -> subst (map/cons Phi X C) (E X) (E' C) -> type.
%mode subst-append +E +E' +C +DS -DS'.

subst-append/num : subst-append ([x] num N) ([x] num N) C subst/num subst/num.

subst-append/var : subst-append E E' C (subst/var DL) (subst/var DL')
                    <- lookup-append E E' C DL DL'.

% Missing case:
% subst-append/local : subst-append E E C (subst/local L) DS'.

subst-append/lam : subst-append ([x] lam (E1 x)) ([x] lam (E1' x)) C (subst/lam DS1) (subst/lam DS1')
                    <- {y} {l} subst-append ([x] E1 x y) ([x] E1' x y) C (DS1 y l) (DS1' y l).

subst-append/app : subst-append ([x] app (E1 x) (E2 x)) ([x] app (E1' x) (E2' x)) C
                    (subst/app DS2 DS1) (subst/app DS2' DS1')
                    <- subst-append E1 E1' C DS1 DS1'
                    <- subst-append E2 E2' C DS2 DS2'.

%worlds (bl-exp | bl-local) (subst-append _ _ _ _ _).
% total (DS) (subst-append _ _ _ DS _).
